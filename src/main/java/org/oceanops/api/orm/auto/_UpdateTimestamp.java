package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _UpdateTimestamp was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _UpdateTimestamp extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String NAME_PK_COLUMN = "NAME";

    public static final NumericProperty<BigDecimal> COMPLETED = PropertyFactory.createNumeric("completed", BigDecimal.class);
    public static final DateProperty<LocalDateTime> LAST_UPDATE = PropertyFactory.createDate("lastUpdate", LocalDateTime.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<BigDecimal> RUNNING = PropertyFactory.createNumeric("running", BigDecimal.class);

    protected BigDecimal completed;
    protected LocalDateTime lastUpdate;
    protected String name;
    protected BigDecimal running;


    public void setCompleted(BigDecimal completed) {
        beforePropertyWrite("completed", this.completed, completed);
        this.completed = completed;
    }

    public BigDecimal getCompleted() {
        beforePropertyRead("completed");
        return this.completed;
    }

    public void setLastUpdate(LocalDateTime lastUpdate) {
        beforePropertyWrite("lastUpdate", this.lastUpdate, lastUpdate);
        this.lastUpdate = lastUpdate;
    }

    public LocalDateTime getLastUpdate() {
        beforePropertyRead("lastUpdate");
        return this.lastUpdate;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setRunning(BigDecimal running) {
        beforePropertyWrite("running", this.running, running);
        this.running = running;
    }

    public BigDecimal getRunning() {
        beforePropertyRead("running");
        return this.running;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "completed":
                return this.completed;
            case "lastUpdate":
                return this.lastUpdate;
            case "name":
                return this.name;
            case "running":
                return this.running;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "completed":
                this.completed = (BigDecimal)val;
                break;
            case "lastUpdate":
                this.lastUpdate = (LocalDateTime)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "running":
                this.running = (BigDecimal)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.completed);
        out.writeObject(this.lastUpdate);
        out.writeObject(this.name);
        out.writeObject(this.running);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.completed = (BigDecimal)in.readObject();
        this.lastUpdate = (LocalDateTime)in.readObject();
        this.name = (String)in.readObject();
        this.running = (BigDecimal)in.readObject();
    }

}
