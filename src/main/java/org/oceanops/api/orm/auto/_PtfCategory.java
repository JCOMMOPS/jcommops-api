package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Category;
import org.oceanops.api.orm.Ptf;

/**
 * Class _PtfCategory was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfCategory extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String CATEGORY_ID_PK_COLUMN = "CATEGORY_ID";
    public static final String PTF_ID_PK_COLUMN = "PTF_ID";

    public static final NumericProperty<BigDecimal> CATEGORY_ID = PropertyFactory.createNumeric("categoryId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> PTF_ID = PropertyFactory.createNumeric("ptfId", BigDecimal.class);
    public static final EntityProperty<Category> CATEGORY = PropertyFactory.createEntity("category", Category.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);

    protected BigDecimal categoryId;
    protected BigDecimal ptfId;

    protected Object category;
    protected Object ptf;

    public void setCategoryId(BigDecimal categoryId) {
        beforePropertyWrite("categoryId", this.categoryId, categoryId);
        this.categoryId = categoryId;
    }

    public BigDecimal getCategoryId() {
        beforePropertyRead("categoryId");
        return this.categoryId;
    }

    public void setPtfId(BigDecimal ptfId) {
        beforePropertyWrite("ptfId", this.ptfId, ptfId);
        this.ptfId = ptfId;
    }

    public BigDecimal getPtfId() {
        beforePropertyRead("ptfId");
        return this.ptfId;
    }

    public void setCategory(Category category) {
        setToOneTarget("category", category, true);
    }

    public Category getCategory() {
        return (Category)readProperty("category");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "categoryId":
                return this.categoryId;
            case "ptfId":
                return this.ptfId;
            case "category":
                return this.category;
            case "ptf":
                return this.ptf;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "categoryId":
                this.categoryId = (BigDecimal)val;
                break;
            case "ptfId":
                this.ptfId = (BigDecimal)val;
                break;
            case "category":
                this.category = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.categoryId);
        out.writeObject(this.ptfId);
        out.writeObject(this.category);
        out.writeObject(this.ptf);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.categoryId = (BigDecimal)in.readObject();
        this.ptfId = (BigDecimal)in.readObject();
        this.category = in.readObject();
        this.ptf = in.readObject();
    }

}
