package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.Contact;
import org.oceanops.api.orm.Cruise;
import org.oceanops.api.orm.Ptf;
import org.oceanops.api.orm.SensorModel;

/**
 * Class _Service was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Service extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> CALIBRATION_DATE = PropertyFactory.createDate("calibrationDate", LocalDateTime.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final DateProperty<LocalDateTime> SERVICE_DATE = PropertyFactory.createDate("serviceDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<Contact> CONTACT = PropertyFactory.createEntity("contact", Contact.class);
    public static final EntityProperty<Cruise> CRUISE = PropertyFactory.createEntity("cruise", Cruise.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);
    public static final EntityProperty<SensorModel> SENSOR_MODEL = PropertyFactory.createEntity("sensorModel", SensorModel.class);

    protected LocalDateTime calibrationDate;
    protected String description;
    protected LocalDateTime endDate;
    protected BigDecimal id;
    protected LocalDateTime serviceDate;
    protected LocalDateTime startDate;

    protected Object agency;
    protected Object contact;
    protected Object cruise;
    protected Object ptf;
    protected Object sensorModel;

    public void setCalibrationDate(LocalDateTime calibrationDate) {
        beforePropertyWrite("calibrationDate", this.calibrationDate, calibrationDate);
        this.calibrationDate = calibrationDate;
    }

    public LocalDateTime getCalibrationDate() {
        beforePropertyRead("calibrationDate");
        return this.calibrationDate;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setServiceDate(LocalDateTime serviceDate) {
        beforePropertyWrite("serviceDate", this.serviceDate, serviceDate);
        this.serviceDate = serviceDate;
    }

    public LocalDateTime getServiceDate() {
        beforePropertyRead("serviceDate");
        return this.serviceDate;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void setCruise(Cruise cruise) {
        setToOneTarget("cruise", cruise, true);
    }

    public Cruise getCruise() {
        return (Cruise)readProperty("cruise");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    public void setSensorModel(SensorModel sensorModel) {
        setToOneTarget("sensorModel", sensorModel, true);
    }

    public SensorModel getSensorModel() {
        return (SensorModel)readProperty("sensorModel");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "calibrationDate":
                return this.calibrationDate;
            case "description":
                return this.description;
            case "endDate":
                return this.endDate;
            case "id":
                return this.id;
            case "serviceDate":
                return this.serviceDate;
            case "startDate":
                return this.startDate;
            case "agency":
                return this.agency;
            case "contact":
                return this.contact;
            case "cruise":
                return this.cruise;
            case "ptf":
                return this.ptf;
            case "sensorModel":
                return this.sensorModel;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "calibrationDate":
                this.calibrationDate = (LocalDateTime)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "serviceDate":
                this.serviceDate = (LocalDateTime)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "cruise":
                this.cruise = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            case "sensorModel":
                this.sensorModel = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.calibrationDate);
        out.writeObject(this.description);
        out.writeObject(this.endDate);
        out.writeObject(this.id);
        out.writeObject(this.serviceDate);
        out.writeObject(this.startDate);
        out.writeObject(this.agency);
        out.writeObject(this.contact);
        out.writeObject(this.cruise);
        out.writeObject(this.ptf);
        out.writeObject(this.sensorModel);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.calibrationDate = (LocalDateTime)in.readObject();
        this.description = (String)in.readObject();
        this.endDate = (LocalDateTime)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.serviceDate = (LocalDateTime)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.agency = in.readObject();
        this.contact = in.readObject();
        this.cruise = in.readObject();
        this.ptf = in.readObject();
        this.sensorModel = in.readObject();
    }

}
