package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.EndingCause;
import org.oceanops.api.orm.Network;

/**
 * Class _NetworkEndingCause was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NetworkEndingCause extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ENDING_CAUSE_ID_PK_COLUMN = "ENDING_CAUSE_ID";
    public static final String NETWORK_ID_PK_COLUMN = "NETWORK_ID";

    public static final NumericProperty<BigDecimal> ENDING_CAUSE_ID = PropertyFactory.createNumeric("endingCauseId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> NETWORK_ID = PropertyFactory.createNumeric("networkId", BigDecimal.class);
    public static final EntityProperty<EndingCause> ENDING_CAUSE = PropertyFactory.createEntity("endingCause", EndingCause.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);

    protected BigDecimal endingCauseId;
    protected BigDecimal networkId;

    protected Object endingCause;
    protected Object network;

    public void setEndingCauseId(BigDecimal endingCauseId) {
        beforePropertyWrite("endingCauseId", this.endingCauseId, endingCauseId);
        this.endingCauseId = endingCauseId;
    }

    public BigDecimal getEndingCauseId() {
        beforePropertyRead("endingCauseId");
        return this.endingCauseId;
    }

    public void setNetworkId(BigDecimal networkId) {
        beforePropertyWrite("networkId", this.networkId, networkId);
        this.networkId = networkId;
    }

    public BigDecimal getNetworkId() {
        beforePropertyRead("networkId");
        return this.networkId;
    }

    public void setEndingCause(EndingCause endingCause) {
        setToOneTarget("endingCause", endingCause, true);
    }

    public EndingCause getEndingCause() {
        return (EndingCause)readProperty("endingCause");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "endingCauseId":
                return this.endingCauseId;
            case "networkId":
                return this.networkId;
            case "endingCause":
                return this.endingCause;
            case "network":
                return this.network;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "endingCauseId":
                this.endingCauseId = (BigDecimal)val;
                break;
            case "networkId":
                this.networkId = (BigDecimal)val;
                break;
            case "endingCause":
                this.endingCause = val;
                break;
            case "network":
                this.network = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.endingCauseId);
        out.writeObject(this.networkId);
        out.writeObject(this.endingCause);
        out.writeObject(this.network);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.endingCauseId = (BigDecimal)in.readObject();
        this.networkId = (BigDecimal)in.readObject();
        this.endingCause = in.readObject();
        this.network = in.readObject();
    }

}
