package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Doc;
import org.oceanops.api.orm.LocSystem;
import org.oceanops.api.orm.Obs;
import org.oceanops.api.orm.Ptf;

/**
 * Class _PtfLoc was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfLoc extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<BigDecimal> ELEVATION = PropertyFactory.createNumeric("elevation", BigDecimal.class);
    public static final NumericProperty<BigDecimal> FLAG = PropertyFactory.createNumeric("flag", BigDecimal.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final NumericProperty<BigDecimal> IMG_LAT = PropertyFactory.createNumeric("imgLat", BigDecimal.class);
    public static final NumericProperty<BigDecimal> IMG_LON = PropertyFactory.createNumeric("imgLon", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LAT = PropertyFactory.createNumeric("lat", BigDecimal.class);
    public static final DateProperty<LocalDateTime> LOC_DATE = PropertyFactory.createDate("locDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> LON = PropertyFactory.createNumeric("lon", BigDecimal.class);
    public static final NumericProperty<BigDecimal> QUALITY = PropertyFactory.createNumeric("quality", BigDecimal.class);
    public static final ListProperty<Doc> DOCS = PropertyFactory.createList("docs", Doc.class);
    public static final EntityProperty<LocSystem> LOC_SYSTEM = PropertyFactory.createEntity("locSystem", LocSystem.class);
    public static final ListProperty<Obs> OBSS = PropertyFactory.createList("obss", Obs.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);

    protected BigDecimal elevation;
    protected BigDecimal flag;
    protected BigDecimal id;
    protected BigDecimal imgLat;
    protected BigDecimal imgLon;
    protected BigDecimal lat;
    protected LocalDateTime locDate;
    protected BigDecimal lon;
    protected BigDecimal quality;

    protected Object docs;
    protected Object locSystem;
    protected Object obss;
    protected Object ptf;

    public void setElevation(BigDecimal elevation) {
        beforePropertyWrite("elevation", this.elevation, elevation);
        this.elevation = elevation;
    }

    public BigDecimal getElevation() {
        beforePropertyRead("elevation");
        return this.elevation;
    }

    public void setFlag(BigDecimal flag) {
        beforePropertyWrite("flag", this.flag, flag);
        this.flag = flag;
    }

    public BigDecimal getFlag() {
        beforePropertyRead("flag");
        return this.flag;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setImgLat(BigDecimal imgLat) {
        beforePropertyWrite("imgLat", this.imgLat, imgLat);
        this.imgLat = imgLat;
    }

    public BigDecimal getImgLat() {
        beforePropertyRead("imgLat");
        return this.imgLat;
    }

    public void setImgLon(BigDecimal imgLon) {
        beforePropertyWrite("imgLon", this.imgLon, imgLon);
        this.imgLon = imgLon;
    }

    public BigDecimal getImgLon() {
        beforePropertyRead("imgLon");
        return this.imgLon;
    }

    public void setLat(BigDecimal lat) {
        beforePropertyWrite("lat", this.lat, lat);
        this.lat = lat;
    }

    public BigDecimal getLat() {
        beforePropertyRead("lat");
        return this.lat;
    }

    public void setLocDate(LocalDateTime locDate) {
        beforePropertyWrite("locDate", this.locDate, locDate);
        this.locDate = locDate;
    }

    public LocalDateTime getLocDate() {
        beforePropertyRead("locDate");
        return this.locDate;
    }

    public void setLon(BigDecimal lon) {
        beforePropertyWrite("lon", this.lon, lon);
        this.lon = lon;
    }

    public BigDecimal getLon() {
        beforePropertyRead("lon");
        return this.lon;
    }

    public void setQuality(BigDecimal quality) {
        beforePropertyWrite("quality", this.quality, quality);
        this.quality = quality;
    }

    public BigDecimal getQuality() {
        beforePropertyRead("quality");
        return this.quality;
    }

    public void addToDocs(Doc obj) {
        addToManyTarget("docs", obj, true);
    }

    public void removeFromDocs(Doc obj) {
        removeToManyTarget("docs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Doc> getDocs() {
        return (List<Doc>)readProperty("docs");
    }

    public void setLocSystem(LocSystem locSystem) {
        setToOneTarget("locSystem", locSystem, true);
    }

    public LocSystem getLocSystem() {
        return (LocSystem)readProperty("locSystem");
    }

    public void addToObss(Obs obj) {
        addToManyTarget("obss", obj, true);
    }

    public void removeFromObss(Obs obj) {
        removeToManyTarget("obss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Obs> getObss() {
        return (List<Obs>)readProperty("obss");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "elevation":
                return this.elevation;
            case "flag":
                return this.flag;
            case "id":
                return this.id;
            case "imgLat":
                return this.imgLat;
            case "imgLon":
                return this.imgLon;
            case "lat":
                return this.lat;
            case "locDate":
                return this.locDate;
            case "lon":
                return this.lon;
            case "quality":
                return this.quality;
            case "docs":
                return this.docs;
            case "locSystem":
                return this.locSystem;
            case "obss":
                return this.obss;
            case "ptf":
                return this.ptf;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "elevation":
                this.elevation = (BigDecimal)val;
                break;
            case "flag":
                this.flag = (BigDecimal)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "imgLat":
                this.imgLat = (BigDecimal)val;
                break;
            case "imgLon":
                this.imgLon = (BigDecimal)val;
                break;
            case "lat":
                this.lat = (BigDecimal)val;
                break;
            case "locDate":
                this.locDate = (LocalDateTime)val;
                break;
            case "lon":
                this.lon = (BigDecimal)val;
                break;
            case "quality":
                this.quality = (BigDecimal)val;
                break;
            case "docs":
                this.docs = val;
                break;
            case "locSystem":
                this.locSystem = val;
                break;
            case "obss":
                this.obss = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.elevation);
        out.writeObject(this.flag);
        out.writeObject(this.id);
        out.writeObject(this.imgLat);
        out.writeObject(this.imgLon);
        out.writeObject(this.lat);
        out.writeObject(this.locDate);
        out.writeObject(this.lon);
        out.writeObject(this.quality);
        out.writeObject(this.docs);
        out.writeObject(this.locSystem);
        out.writeObject(this.obss);
        out.writeObject(this.ptf);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.elevation = (BigDecimal)in.readObject();
        this.flag = (BigDecimal)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.imgLat = (BigDecimal)in.readObject();
        this.imgLon = (BigDecimal)in.readObject();
        this.lat = (BigDecimal)in.readObject();
        this.locDate = (LocalDateTime)in.readObject();
        this.lon = (BigDecimal)in.readObject();
        this.quality = (BigDecimal)in.readObject();
        this.docs = in.readObject();
        this.locSystem = in.readObject();
        this.obss = in.readObject();
        this.ptf = in.readObject();
    }

}
