package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Program;
import org.oceanops.api.orm.Ptf;
import org.oceanops.api.orm.SensorExposure;
import org.oceanops.api.orm.SensorLocation;
import org.oceanops.api.orm.SensorModel;
import org.oceanops.api.orm.Variable;
import org.oceanops.api.orm.Weblink;

/**
 * Class _PtfVariable was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfVariable extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> AVERAGING_METHOD = PropertyFactory.createString("averagingMethod", String.class);
    public static final NumericProperty<BigDecimal> AVERAGING_PERIOD = PropertyFactory.createNumeric("averagingPeriod", BigDecimal.class);
    public static final DateProperty<LocalDateTime> CALIB_DATE = PropertyFactory.createDate("calibDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> CALIB_DATE_NEXT = PropertyFactory.createDate("calibDateNext", LocalDateTime.class);
    public static final StringProperty<String> COMMENTS = PropertyFactory.createString("comments", String.class);
    public static final NumericProperty<BigDecimal> DATA_PROCESSING_METHOD_ID = PropertyFactory.createNumeric("dataProcessingMethodId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> DISTANCE_X = PropertyFactory.createNumeric("distanceX", BigDecimal.class);
    public static final NumericProperty<BigDecimal> DISTANCE_Y = PropertyFactory.createNumeric("distanceY", BigDecimal.class);
    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> FIRST_MEASURED = PropertyFactory.createDate("firstMeasured", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> HEIGHT = PropertyFactory.createNumeric("height", BigDecimal.class);
    public static final NumericProperty<BigDecimal> HEIGHT_SECONDARY_REF_LEVEL = PropertyFactory.createNumeric("heightSecondaryRefLevel", BigDecimal.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final NumericProperty<BigDecimal> IS_PRIMARY = PropertyFactory.createNumeric("isPrimary", BigDecimal.class);
    public static final DateProperty<LocalDateTime> LAST_MEASURED = PropertyFactory.createDate("lastMeasured", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> MANUF_DATE = PropertyFactory.createDate("manufDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> NB_OBS = PropertyFactory.createNumeric("nbObs", BigDecimal.class);
    public static final StringProperty<String> OWNERSHIP = PropertyFactory.createString("ownership", String.class);
    public static final NumericProperty<BigDecimal> PACKAGE_N = PropertyFactory.createNumeric("packageN", BigDecimal.class);
    public static final NumericProperty<BigDecimal> SAMPLING_RATE = PropertyFactory.createNumeric("samplingRate", BigDecimal.class);
    public static final NumericProperty<BigDecimal> SAMPLING_RATE_TOTAL = PropertyFactory.createNumeric("samplingRateTotal", BigDecimal.class);
    public static final NumericProperty<BigDecimal> SENSOR_STATUS_ID = PropertyFactory.createNumeric("sensorStatusId", BigDecimal.class);
    public static final StringProperty<String> SERIAL_NO = PropertyFactory.createString("serialNo", String.class);
    public static final NumericProperty<BigDecimal> SERVICE_SCHEDULE_ID = PropertyFactory.createNumeric("serviceScheduleId", BigDecimal.class);
    public static final StringProperty<String> SIDE_INDICATOR = PropertyFactory.createString("sideIndicator", String.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> TIME_OFFSET = PropertyFactory.createNumeric("timeOffset", BigDecimal.class);
    public static final EntityProperty<Program> PROGRAM = PropertyFactory.createEntity("program", Program.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);
    public static final EntityProperty<SensorExposure> SENSOR_EXPOSURE = PropertyFactory.createEntity("sensorExposure", SensorExposure.class);
    public static final EntityProperty<SensorLocation> SENSOR_LOCATION = PropertyFactory.createEntity("sensorLocation", SensorLocation.class);
    public static final EntityProperty<SensorModel> SENSOR_MODEL = PropertyFactory.createEntity("sensorModel", SensorModel.class);
    public static final EntityProperty<Variable> VARIABLE = PropertyFactory.createEntity("variable", Variable.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected String averagingMethod;
    protected BigDecimal averagingPeriod;
    protected LocalDateTime calibDate;
    protected LocalDateTime calibDateNext;
    protected String comments;
    protected BigDecimal dataProcessingMethodId;
    protected BigDecimal distanceX;
    protected BigDecimal distanceY;
    protected LocalDateTime endDate;
    protected LocalDateTime firstMeasured;
    protected BigDecimal height;
    protected BigDecimal heightSecondaryRefLevel;
    protected BigDecimal id;
    protected BigDecimal isPrimary;
    protected LocalDateTime lastMeasured;
    protected LocalDateTime manufDate;
    protected BigDecimal nbObs;
    protected String ownership;
    protected BigDecimal packageN;
    protected BigDecimal samplingRate;
    protected BigDecimal samplingRateTotal;
    protected BigDecimal sensorStatusId;
    protected String serialNo;
    protected BigDecimal serviceScheduleId;
    protected String sideIndicator;
    protected LocalDateTime startDate;
    protected BigDecimal timeOffset;

    protected Object program;
    protected Object ptf;
    protected Object sensorExposure;
    protected Object sensorLocation;
    protected Object sensorModel;
    protected Object variable;
    protected Object weblink;

    public void setAveragingMethod(String averagingMethod) {
        beforePropertyWrite("averagingMethod", this.averagingMethod, averagingMethod);
        this.averagingMethod = averagingMethod;
    }

    public String getAveragingMethod() {
        beforePropertyRead("averagingMethod");
        return this.averagingMethod;
    }

    public void setAveragingPeriod(BigDecimal averagingPeriod) {
        beforePropertyWrite("averagingPeriod", this.averagingPeriod, averagingPeriod);
        this.averagingPeriod = averagingPeriod;
    }

    public BigDecimal getAveragingPeriod() {
        beforePropertyRead("averagingPeriod");
        return this.averagingPeriod;
    }

    public void setCalibDate(LocalDateTime calibDate) {
        beforePropertyWrite("calibDate", this.calibDate, calibDate);
        this.calibDate = calibDate;
    }

    public LocalDateTime getCalibDate() {
        beforePropertyRead("calibDate");
        return this.calibDate;
    }

    public void setCalibDateNext(LocalDateTime calibDateNext) {
        beforePropertyWrite("calibDateNext", this.calibDateNext, calibDateNext);
        this.calibDateNext = calibDateNext;
    }

    public LocalDateTime getCalibDateNext() {
        beforePropertyRead("calibDateNext");
        return this.calibDateNext;
    }

    public void setComments(String comments) {
        beforePropertyWrite("comments", this.comments, comments);
        this.comments = comments;
    }

    public String getComments() {
        beforePropertyRead("comments");
        return this.comments;
    }

    public void setDataProcessingMethodId(BigDecimal dataProcessingMethodId) {
        beforePropertyWrite("dataProcessingMethodId", this.dataProcessingMethodId, dataProcessingMethodId);
        this.dataProcessingMethodId = dataProcessingMethodId;
    }

    public BigDecimal getDataProcessingMethodId() {
        beforePropertyRead("dataProcessingMethodId");
        return this.dataProcessingMethodId;
    }

    public void setDistanceX(BigDecimal distanceX) {
        beforePropertyWrite("distanceX", this.distanceX, distanceX);
        this.distanceX = distanceX;
    }

    public BigDecimal getDistanceX() {
        beforePropertyRead("distanceX");
        return this.distanceX;
    }

    public void setDistanceY(BigDecimal distanceY) {
        beforePropertyWrite("distanceY", this.distanceY, distanceY);
        this.distanceY = distanceY;
    }

    public BigDecimal getDistanceY() {
        beforePropertyRead("distanceY");
        return this.distanceY;
    }

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setFirstMeasured(LocalDateTime firstMeasured) {
        beforePropertyWrite("firstMeasured", this.firstMeasured, firstMeasured);
        this.firstMeasured = firstMeasured;
    }

    public LocalDateTime getFirstMeasured() {
        beforePropertyRead("firstMeasured");
        return this.firstMeasured;
    }

    public void setHeight(BigDecimal height) {
        beforePropertyWrite("height", this.height, height);
        this.height = height;
    }

    public BigDecimal getHeight() {
        beforePropertyRead("height");
        return this.height;
    }

    public void setHeightSecondaryRefLevel(BigDecimal heightSecondaryRefLevel) {
        beforePropertyWrite("heightSecondaryRefLevel", this.heightSecondaryRefLevel, heightSecondaryRefLevel);
        this.heightSecondaryRefLevel = heightSecondaryRefLevel;
    }

    public BigDecimal getHeightSecondaryRefLevel() {
        beforePropertyRead("heightSecondaryRefLevel");
        return this.heightSecondaryRefLevel;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setIsPrimary(BigDecimal isPrimary) {
        beforePropertyWrite("isPrimary", this.isPrimary, isPrimary);
        this.isPrimary = isPrimary;
    }

    public BigDecimal getIsPrimary() {
        beforePropertyRead("isPrimary");
        return this.isPrimary;
    }

    public void setLastMeasured(LocalDateTime lastMeasured) {
        beforePropertyWrite("lastMeasured", this.lastMeasured, lastMeasured);
        this.lastMeasured = lastMeasured;
    }

    public LocalDateTime getLastMeasured() {
        beforePropertyRead("lastMeasured");
        return this.lastMeasured;
    }

    public void setManufDate(LocalDateTime manufDate) {
        beforePropertyWrite("manufDate", this.manufDate, manufDate);
        this.manufDate = manufDate;
    }

    public LocalDateTime getManufDate() {
        beforePropertyRead("manufDate");
        return this.manufDate;
    }

    public void setNbObs(BigDecimal nbObs) {
        beforePropertyWrite("nbObs", this.nbObs, nbObs);
        this.nbObs = nbObs;
    }

    public BigDecimal getNbObs() {
        beforePropertyRead("nbObs");
        return this.nbObs;
    }

    public void setOwnership(String ownership) {
        beforePropertyWrite("ownership", this.ownership, ownership);
        this.ownership = ownership;
    }

    public String getOwnership() {
        beforePropertyRead("ownership");
        return this.ownership;
    }

    public void setPackageN(BigDecimal packageN) {
        beforePropertyWrite("packageN", this.packageN, packageN);
        this.packageN = packageN;
    }

    public BigDecimal getPackageN() {
        beforePropertyRead("packageN");
        return this.packageN;
    }

    public void setSamplingRate(BigDecimal samplingRate) {
        beforePropertyWrite("samplingRate", this.samplingRate, samplingRate);
        this.samplingRate = samplingRate;
    }

    public BigDecimal getSamplingRate() {
        beforePropertyRead("samplingRate");
        return this.samplingRate;
    }

    public void setSamplingRateTotal(BigDecimal samplingRateTotal) {
        beforePropertyWrite("samplingRateTotal", this.samplingRateTotal, samplingRateTotal);
        this.samplingRateTotal = samplingRateTotal;
    }

    public BigDecimal getSamplingRateTotal() {
        beforePropertyRead("samplingRateTotal");
        return this.samplingRateTotal;
    }

    public void setSensorStatusId(BigDecimal sensorStatusId) {
        beforePropertyWrite("sensorStatusId", this.sensorStatusId, sensorStatusId);
        this.sensorStatusId = sensorStatusId;
    }

    public BigDecimal getSensorStatusId() {
        beforePropertyRead("sensorStatusId");
        return this.sensorStatusId;
    }

    public void setSerialNo(String serialNo) {
        beforePropertyWrite("serialNo", this.serialNo, serialNo);
        this.serialNo = serialNo;
    }

    public String getSerialNo() {
        beforePropertyRead("serialNo");
        return this.serialNo;
    }

    public void setServiceScheduleId(BigDecimal serviceScheduleId) {
        beforePropertyWrite("serviceScheduleId", this.serviceScheduleId, serviceScheduleId);
        this.serviceScheduleId = serviceScheduleId;
    }

    public BigDecimal getServiceScheduleId() {
        beforePropertyRead("serviceScheduleId");
        return this.serviceScheduleId;
    }

    public void setSideIndicator(String sideIndicator) {
        beforePropertyWrite("sideIndicator", this.sideIndicator, sideIndicator);
        this.sideIndicator = sideIndicator;
    }

    public String getSideIndicator() {
        beforePropertyRead("sideIndicator");
        return this.sideIndicator;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setTimeOffset(BigDecimal timeOffset) {
        beforePropertyWrite("timeOffset", this.timeOffset, timeOffset);
        this.timeOffset = timeOffset;
    }

    public BigDecimal getTimeOffset() {
        beforePropertyRead("timeOffset");
        return this.timeOffset;
    }

    public void setProgram(Program program) {
        setToOneTarget("program", program, true);
    }

    public Program getProgram() {
        return (Program)readProperty("program");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    public void setSensorExposure(SensorExposure sensorExposure) {
        setToOneTarget("sensorExposure", sensorExposure, true);
    }

    public SensorExposure getSensorExposure() {
        return (SensorExposure)readProperty("sensorExposure");
    }

    public void setSensorLocation(SensorLocation sensorLocation) {
        setToOneTarget("sensorLocation", sensorLocation, true);
    }

    public SensorLocation getSensorLocation() {
        return (SensorLocation)readProperty("sensorLocation");
    }

    public void setSensorModel(SensorModel sensorModel) {
        setToOneTarget("sensorModel", sensorModel, true);
    }

    public SensorModel getSensorModel() {
        return (SensorModel)readProperty("sensorModel");
    }

    public void setVariable(Variable variable) {
        setToOneTarget("variable", variable, true);
    }

    public Variable getVariable() {
        return (Variable)readProperty("variable");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "averagingMethod":
                return this.averagingMethod;
            case "averagingPeriod":
                return this.averagingPeriod;
            case "calibDate":
                return this.calibDate;
            case "calibDateNext":
                return this.calibDateNext;
            case "comments":
                return this.comments;
            case "dataProcessingMethodId":
                return this.dataProcessingMethodId;
            case "distanceX":
                return this.distanceX;
            case "distanceY":
                return this.distanceY;
            case "endDate":
                return this.endDate;
            case "firstMeasured":
                return this.firstMeasured;
            case "height":
                return this.height;
            case "heightSecondaryRefLevel":
                return this.heightSecondaryRefLevel;
            case "id":
                return this.id;
            case "isPrimary":
                return this.isPrimary;
            case "lastMeasured":
                return this.lastMeasured;
            case "manufDate":
                return this.manufDate;
            case "nbObs":
                return this.nbObs;
            case "ownership":
                return this.ownership;
            case "packageN":
                return this.packageN;
            case "samplingRate":
                return this.samplingRate;
            case "samplingRateTotal":
                return this.samplingRateTotal;
            case "sensorStatusId":
                return this.sensorStatusId;
            case "serialNo":
                return this.serialNo;
            case "serviceScheduleId":
                return this.serviceScheduleId;
            case "sideIndicator":
                return this.sideIndicator;
            case "startDate":
                return this.startDate;
            case "timeOffset":
                return this.timeOffset;
            case "program":
                return this.program;
            case "ptf":
                return this.ptf;
            case "sensorExposure":
                return this.sensorExposure;
            case "sensorLocation":
                return this.sensorLocation;
            case "sensorModel":
                return this.sensorModel;
            case "variable":
                return this.variable;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "averagingMethod":
                this.averagingMethod = (String)val;
                break;
            case "averagingPeriod":
                this.averagingPeriod = (BigDecimal)val;
                break;
            case "calibDate":
                this.calibDate = (LocalDateTime)val;
                break;
            case "calibDateNext":
                this.calibDateNext = (LocalDateTime)val;
                break;
            case "comments":
                this.comments = (String)val;
                break;
            case "dataProcessingMethodId":
                this.dataProcessingMethodId = (BigDecimal)val;
                break;
            case "distanceX":
                this.distanceX = (BigDecimal)val;
                break;
            case "distanceY":
                this.distanceY = (BigDecimal)val;
                break;
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "firstMeasured":
                this.firstMeasured = (LocalDateTime)val;
                break;
            case "height":
                this.height = (BigDecimal)val;
                break;
            case "heightSecondaryRefLevel":
                this.heightSecondaryRefLevel = (BigDecimal)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "isPrimary":
                this.isPrimary = (BigDecimal)val;
                break;
            case "lastMeasured":
                this.lastMeasured = (LocalDateTime)val;
                break;
            case "manufDate":
                this.manufDate = (LocalDateTime)val;
                break;
            case "nbObs":
                this.nbObs = (BigDecimal)val;
                break;
            case "ownership":
                this.ownership = (String)val;
                break;
            case "packageN":
                this.packageN = (BigDecimal)val;
                break;
            case "samplingRate":
                this.samplingRate = (BigDecimal)val;
                break;
            case "samplingRateTotal":
                this.samplingRateTotal = (BigDecimal)val;
                break;
            case "sensorStatusId":
                this.sensorStatusId = (BigDecimal)val;
                break;
            case "serialNo":
                this.serialNo = (String)val;
                break;
            case "serviceScheduleId":
                this.serviceScheduleId = (BigDecimal)val;
                break;
            case "sideIndicator":
                this.sideIndicator = (String)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "timeOffset":
                this.timeOffset = (BigDecimal)val;
                break;
            case "program":
                this.program = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            case "sensorExposure":
                this.sensorExposure = val;
                break;
            case "sensorLocation":
                this.sensorLocation = val;
                break;
            case "sensorModel":
                this.sensorModel = val;
                break;
            case "variable":
                this.variable = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.averagingMethod);
        out.writeObject(this.averagingPeriod);
        out.writeObject(this.calibDate);
        out.writeObject(this.calibDateNext);
        out.writeObject(this.comments);
        out.writeObject(this.dataProcessingMethodId);
        out.writeObject(this.distanceX);
        out.writeObject(this.distanceY);
        out.writeObject(this.endDate);
        out.writeObject(this.firstMeasured);
        out.writeObject(this.height);
        out.writeObject(this.heightSecondaryRefLevel);
        out.writeObject(this.id);
        out.writeObject(this.isPrimary);
        out.writeObject(this.lastMeasured);
        out.writeObject(this.manufDate);
        out.writeObject(this.nbObs);
        out.writeObject(this.ownership);
        out.writeObject(this.packageN);
        out.writeObject(this.samplingRate);
        out.writeObject(this.samplingRateTotal);
        out.writeObject(this.sensorStatusId);
        out.writeObject(this.serialNo);
        out.writeObject(this.serviceScheduleId);
        out.writeObject(this.sideIndicator);
        out.writeObject(this.startDate);
        out.writeObject(this.timeOffset);
        out.writeObject(this.program);
        out.writeObject(this.ptf);
        out.writeObject(this.sensorExposure);
        out.writeObject(this.sensorLocation);
        out.writeObject(this.sensorModel);
        out.writeObject(this.variable);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.averagingMethod = (String)in.readObject();
        this.averagingPeriod = (BigDecimal)in.readObject();
        this.calibDate = (LocalDateTime)in.readObject();
        this.calibDateNext = (LocalDateTime)in.readObject();
        this.comments = (String)in.readObject();
        this.dataProcessingMethodId = (BigDecimal)in.readObject();
        this.distanceX = (BigDecimal)in.readObject();
        this.distanceY = (BigDecimal)in.readObject();
        this.endDate = (LocalDateTime)in.readObject();
        this.firstMeasured = (LocalDateTime)in.readObject();
        this.height = (BigDecimal)in.readObject();
        this.heightSecondaryRefLevel = (BigDecimal)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.isPrimary = (BigDecimal)in.readObject();
        this.lastMeasured = (LocalDateTime)in.readObject();
        this.manufDate = (LocalDateTime)in.readObject();
        this.nbObs = (BigDecimal)in.readObject();
        this.ownership = (String)in.readObject();
        this.packageN = (BigDecimal)in.readObject();
        this.samplingRate = (BigDecimal)in.readObject();
        this.samplingRateTotal = (BigDecimal)in.readObject();
        this.sensorStatusId = (BigDecimal)in.readObject();
        this.serialNo = (String)in.readObject();
        this.serviceScheduleId = (BigDecimal)in.readObject();
        this.sideIndicator = (String)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.timeOffset = (BigDecimal)in.readObject();
        this.program = in.readObject();
        this.ptf = in.readObject();
        this.sensorExposure = in.readObject();
        this.sensorLocation = in.readObject();
        this.sensorModel = in.readObject();
        this.variable = in.readObject();
        this.weblink = in.readObject();
    }

}
