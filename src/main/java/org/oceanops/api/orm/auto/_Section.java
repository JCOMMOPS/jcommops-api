package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Cruise;
import org.oceanops.api.orm.Line;

/**
 * Class _Section was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Section extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> DATE_END = PropertyFactory.createDate("dateEnd", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> DATE_START = PropertyFactory.createDate("dateStart", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final StringProperty<String> REF = PropertyFactory.createString("ref", String.class);
    public static final EntityProperty<Cruise> CRUISE = PropertyFactory.createEntity("cruise", Cruise.class);
    public static final EntityProperty<Line> LINE = PropertyFactory.createEntity("line", Line.class);

    protected LocalDateTime dateEnd;
    protected LocalDateTime dateStart;
    protected BigDecimal id;
    protected String ref;

    protected Object cruise;
    protected Object line;

    public void setDateEnd(LocalDateTime dateEnd) {
        beforePropertyWrite("dateEnd", this.dateEnd, dateEnd);
        this.dateEnd = dateEnd;
    }

    public LocalDateTime getDateEnd() {
        beforePropertyRead("dateEnd");
        return this.dateEnd;
    }

    public void setDateStart(LocalDateTime dateStart) {
        beforePropertyWrite("dateStart", this.dateStart, dateStart);
        this.dateStart = dateStart;
    }

    public LocalDateTime getDateStart() {
        beforePropertyRead("dateStart");
        return this.dateStart;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setRef(String ref) {
        beforePropertyWrite("ref", this.ref, ref);
        this.ref = ref;
    }

    public String getRef() {
        beforePropertyRead("ref");
        return this.ref;
    }

    public void setCruise(Cruise cruise) {
        setToOneTarget("cruise", cruise, true);
    }

    public Cruise getCruise() {
        return (Cruise)readProperty("cruise");
    }

    public void setLine(Line line) {
        setToOneTarget("line", line, true);
    }

    public Line getLine() {
        return (Line)readProperty("line");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateEnd":
                return this.dateEnd;
            case "dateStart":
                return this.dateStart;
            case "id":
                return this.id;
            case "ref":
                return this.ref;
            case "cruise":
                return this.cruise;
            case "line":
                return this.line;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateEnd":
                this.dateEnd = (LocalDateTime)val;
                break;
            case "dateStart":
                this.dateStart = (LocalDateTime)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "ref":
                this.ref = (String)val;
                break;
            case "cruise":
                this.cruise = val;
                break;
            case "line":
                this.line = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateEnd);
        out.writeObject(this.dateStart);
        out.writeObject(this.id);
        out.writeObject(this.ref);
        out.writeObject(this.cruise);
        out.writeObject(this.line);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateEnd = (LocalDateTime)in.readObject();
        this.dateStart = (LocalDateTime)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.ref = (String)in.readObject();
        this.cruise = in.readObject();
        this.line = in.readObject();
    }

}
