package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.NetworkSite;
import org.oceanops.api.orm.SiteFamily;
import org.oceanops.api.orm.SitePtf;
import org.oceanops.api.orm.SiteStatus;

/**
 * Class _Site was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Site extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<BigDecimal> TARGETED_OCCUPATION = PropertyFactory.createNumeric("targetedOccupation", BigDecimal.class);
    public static final StringProperty<String> WKT = PropertyFactory.createString("wkt", String.class);
    public static final ListProperty<NetworkSite> NETWORK_SITES = PropertyFactory.createList("networkSites", NetworkSite.class);
    public static final EntityProperty<SiteFamily> SITE_FAMILY = PropertyFactory.createEntity("siteFamily", SiteFamily.class);
    public static final ListProperty<SitePtf> SITE_PTFS = PropertyFactory.createList("sitePtfs", SitePtf.class);
    public static final EntityProperty<SiteStatus> STATUS = PropertyFactory.createEntity("status", SiteStatus.class);

    protected String description;
    protected BigDecimal id;
    protected String name;
    protected String nameShort;
    protected BigDecimal targetedOccupation;
    protected String wkt;

    protected Object networkSites;
    protected Object siteFamily;
    protected Object sitePtfs;
    protected Object status;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setTargetedOccupation(BigDecimal targetedOccupation) {
        beforePropertyWrite("targetedOccupation", this.targetedOccupation, targetedOccupation);
        this.targetedOccupation = targetedOccupation;
    }

    public BigDecimal getTargetedOccupation() {
        beforePropertyRead("targetedOccupation");
        return this.targetedOccupation;
    }

    public void setWkt(String wkt) {
        beforePropertyWrite("wkt", this.wkt, wkt);
        this.wkt = wkt;
    }

    public String getWkt() {
        beforePropertyRead("wkt");
        return this.wkt;
    }

    public void addToNetworkSites(NetworkSite obj) {
        addToManyTarget("networkSites", obj, true);
    }

    public void removeFromNetworkSites(NetworkSite obj) {
        removeToManyTarget("networkSites", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkSite> getNetworkSites() {
        return (List<NetworkSite>)readProperty("networkSites");
    }

    public void setSiteFamily(SiteFamily siteFamily) {
        setToOneTarget("siteFamily", siteFamily, true);
    }

    public SiteFamily getSiteFamily() {
        return (SiteFamily)readProperty("siteFamily");
    }

    public void addToSitePtfs(SitePtf obj) {
        addToManyTarget("sitePtfs", obj, true);
    }

    public void removeFromSitePtfs(SitePtf obj) {
        removeToManyTarget("sitePtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SitePtf> getSitePtfs() {
        return (List<SitePtf>)readProperty("sitePtfs");
    }

    public void setStatus(SiteStatus status) {
        setToOneTarget("status", status, true);
    }

    public SiteStatus getStatus() {
        return (SiteStatus)readProperty("status");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "targetedOccupation":
                return this.targetedOccupation;
            case "wkt":
                return this.wkt;
            case "networkSites":
                return this.networkSites;
            case "siteFamily":
                return this.siteFamily;
            case "sitePtfs":
                return this.sitePtfs;
            case "status":
                return this.status;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "targetedOccupation":
                this.targetedOccupation = (BigDecimal)val;
                break;
            case "wkt":
                this.wkt = (String)val;
                break;
            case "networkSites":
                this.networkSites = val;
                break;
            case "siteFamily":
                this.siteFamily = val;
                break;
            case "sitePtfs":
                this.sitePtfs = val;
                break;
            case "status":
                this.status = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.targetedOccupation);
        out.writeObject(this.wkt);
        out.writeObject(this.networkSites);
        out.writeObject(this.siteFamily);
        out.writeObject(this.sitePtfs);
        out.writeObject(this.status);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.targetedOccupation = (BigDecimal)in.readObject();
        this.wkt = (String)in.readObject();
        this.networkSites = in.readObject();
        this.siteFamily = in.readObject();
        this.sitePtfs = in.readObject();
        this.status = in.readObject();
    }

}
