package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Ptf;
import org.oceanops.api.orm.VariableSub;

/**
 * Class _PtfVariableSub was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfVariableSub extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String PTF_ID_PK_COLUMN = "PTF_ID";
    public static final String VARIABLE_SUB_ID_PK_COLUMN = "VARIABLE_SUB_ID";

    public static final DateProperty<LocalDateTime> FIRST_MEASURED = PropertyFactory.createDate("firstMeasured", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> LAST_MEASURED = PropertyFactory.createDate("lastMeasured", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> NB_OBS = PropertyFactory.createNumeric("nbObs", BigDecimal.class);
    public static final NumericProperty<BigDecimal> PTF_ID = PropertyFactory.createNumeric("ptfId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> VARIABLE_SUB_ID = PropertyFactory.createNumeric("variableSubId", BigDecimal.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);
    public static final EntityProperty<VariableSub> VARIABLE_SUB = PropertyFactory.createEntity("variableSub", VariableSub.class);

    protected LocalDateTime firstMeasured;
    protected LocalDateTime lastMeasured;
    protected BigDecimal nbObs;
    protected BigDecimal ptfId;
    protected BigDecimal variableSubId;

    protected Object ptf;
    protected Object variableSub;

    public void setFirstMeasured(LocalDateTime firstMeasured) {
        beforePropertyWrite("firstMeasured", this.firstMeasured, firstMeasured);
        this.firstMeasured = firstMeasured;
    }

    public LocalDateTime getFirstMeasured() {
        beforePropertyRead("firstMeasured");
        return this.firstMeasured;
    }

    public void setLastMeasured(LocalDateTime lastMeasured) {
        beforePropertyWrite("lastMeasured", this.lastMeasured, lastMeasured);
        this.lastMeasured = lastMeasured;
    }

    public LocalDateTime getLastMeasured() {
        beforePropertyRead("lastMeasured");
        return this.lastMeasured;
    }

    public void setNbObs(BigDecimal nbObs) {
        beforePropertyWrite("nbObs", this.nbObs, nbObs);
        this.nbObs = nbObs;
    }

    public BigDecimal getNbObs() {
        beforePropertyRead("nbObs");
        return this.nbObs;
    }

    public void setPtfId(BigDecimal ptfId) {
        beforePropertyWrite("ptfId", this.ptfId, ptfId);
        this.ptfId = ptfId;
    }

    public BigDecimal getPtfId() {
        beforePropertyRead("ptfId");
        return this.ptfId;
    }

    public void setVariableSubId(BigDecimal variableSubId) {
        beforePropertyWrite("variableSubId", this.variableSubId, variableSubId);
        this.variableSubId = variableSubId;
    }

    public BigDecimal getVariableSubId() {
        beforePropertyRead("variableSubId");
        return this.variableSubId;
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    public void setVariableSub(VariableSub variableSub) {
        setToOneTarget("variableSub", variableSub, true);
    }

    public VariableSub getVariableSub() {
        return (VariableSub)readProperty("variableSub");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "firstMeasured":
                return this.firstMeasured;
            case "lastMeasured":
                return this.lastMeasured;
            case "nbObs":
                return this.nbObs;
            case "ptfId":
                return this.ptfId;
            case "variableSubId":
                return this.variableSubId;
            case "ptf":
                return this.ptf;
            case "variableSub":
                return this.variableSub;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "firstMeasured":
                this.firstMeasured = (LocalDateTime)val;
                break;
            case "lastMeasured":
                this.lastMeasured = (LocalDateTime)val;
                break;
            case "nbObs":
                this.nbObs = (BigDecimal)val;
                break;
            case "ptfId":
                this.ptfId = (BigDecimal)val;
                break;
            case "variableSubId":
                this.variableSubId = (BigDecimal)val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            case "variableSub":
                this.variableSub = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.firstMeasured);
        out.writeObject(this.lastMeasured);
        out.writeObject(this.nbObs);
        out.writeObject(this.ptfId);
        out.writeObject(this.variableSubId);
        out.writeObject(this.ptf);
        out.writeObject(this.variableSub);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.firstMeasured = (LocalDateTime)in.readObject();
        this.lastMeasured = (LocalDateTime)in.readObject();
        this.nbObs = (BigDecimal)in.readObject();
        this.ptfId = (BigDecimal)in.readObject();
        this.variableSubId = (BigDecimal)in.readObject();
        this.ptf = in.readObject();
        this.variableSub = in.readObject();
    }

}
