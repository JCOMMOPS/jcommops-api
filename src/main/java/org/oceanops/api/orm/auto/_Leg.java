package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

/**
 * Class _Leg was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Leg extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final BaseProperty<byte[]> END_POINT = PropertyFactory.createBase("endPoint", byte[].class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final BaseProperty<byte[]> START_POINT = PropertyFactory.createBase("startPoint", byte[].class);

    protected LocalDateTime endDate;
    protected byte[] endPoint;
    protected BigDecimal id;
    protected LocalDateTime startDate;
    protected byte[] startPoint;


    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setEndPoint(byte[] endPoint) {
        beforePropertyWrite("endPoint", this.endPoint, endPoint);
        this.endPoint = endPoint;
    }

    public byte[] getEndPoint() {
        beforePropertyRead("endPoint");
        return this.endPoint;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setStartPoint(byte[] startPoint) {
        beforePropertyWrite("startPoint", this.startPoint, startPoint);
        this.startPoint = startPoint;
    }

    public byte[] getStartPoint() {
        beforePropertyRead("startPoint");
        return this.startPoint;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "endDate":
                return this.endDate;
            case "endPoint":
                return this.endPoint;
            case "id":
                return this.id;
            case "startDate":
                return this.startDate;
            case "startPoint":
                return this.startPoint;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "endPoint":
                this.endPoint = (byte[])val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "startPoint":
                this.startPoint = (byte[])val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.endDate);
        out.writeObject(this.endPoint);
        out.writeObject(this.id);
        out.writeObject(this.startDate);
        out.writeObject(this.startPoint);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.endDate = (LocalDateTime)in.readObject();
        this.endPoint = (byte[])in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.startPoint = (byte[])in.readObject();
    }

}
