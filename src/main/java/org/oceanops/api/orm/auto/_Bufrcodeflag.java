package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.PtfDeployment;

/**
 * Class _Bufrcodeflag was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Bufrcodeflag extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<BigDecimal> FILTER = PropertyFactory.createNumeric("filter", BigDecimal.class);
    public static final StringProperty<String> FXY = PropertyFactory.createString("fxy", String.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LOCAL_CENTRE = PropertyFactory.createNumeric("localCentre", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LOCAL_SUB_CENTRE = PropertyFactory.createNumeric("localSubCentre", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MASTER_TABLE = PropertyFactory.createNumeric("masterTable", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX = PropertyFactory.createNumeric("max", BigDecimal.class);
    public static final StringProperty<String> MEANING = PropertyFactory.createString("meaning", String.class);
    public static final NumericProperty<BigDecimal> MIN = PropertyFactory.createNumeric("min", BigDecimal.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<BigDecimal> RANK = PropertyFactory.createNumeric("rank", BigDecimal.class);
    public static final NumericProperty<BigDecimal> TABLE_VERSION = PropertyFactory.createNumeric("tableVersion", BigDecimal.class);
    public static final ListProperty<PtfDeployment> PTF_DEPLOYMENTS = PropertyFactory.createList("ptfDeployments", PtfDeployment.class);
    public static final ListProperty<PtfDeployment> PTF_DEPLOYMENTS1 = PropertyFactory.createList("ptfDeployments1", PtfDeployment.class);

    protected BigDecimal filter;
    protected String fxy;
    protected BigDecimal id;
    protected BigDecimal localCentre;
    protected BigDecimal localSubCentre;
    protected BigDecimal masterTable;
    protected BigDecimal max;
    protected String meaning;
    protected BigDecimal min;
    protected String nameShort;
    protected BigDecimal rank;
    protected BigDecimal tableVersion;

    protected Object ptfDeployments;
    protected Object ptfDeployments1;

    public void setFilter(BigDecimal filter) {
        beforePropertyWrite("filter", this.filter, filter);
        this.filter = filter;
    }

    public BigDecimal getFilter() {
        beforePropertyRead("filter");
        return this.filter;
    }

    public void setFxy(String fxy) {
        beforePropertyWrite("fxy", this.fxy, fxy);
        this.fxy = fxy;
    }

    public String getFxy() {
        beforePropertyRead("fxy");
        return this.fxy;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLocalCentre(BigDecimal localCentre) {
        beforePropertyWrite("localCentre", this.localCentre, localCentre);
        this.localCentre = localCentre;
    }

    public BigDecimal getLocalCentre() {
        beforePropertyRead("localCentre");
        return this.localCentre;
    }

    public void setLocalSubCentre(BigDecimal localSubCentre) {
        beforePropertyWrite("localSubCentre", this.localSubCentre, localSubCentre);
        this.localSubCentre = localSubCentre;
    }

    public BigDecimal getLocalSubCentre() {
        beforePropertyRead("localSubCentre");
        return this.localSubCentre;
    }

    public void setMasterTable(BigDecimal masterTable) {
        beforePropertyWrite("masterTable", this.masterTable, masterTable);
        this.masterTable = masterTable;
    }

    public BigDecimal getMasterTable() {
        beforePropertyRead("masterTable");
        return this.masterTable;
    }

    public void setMax(BigDecimal max) {
        beforePropertyWrite("max", this.max, max);
        this.max = max;
    }

    public BigDecimal getMax() {
        beforePropertyRead("max");
        return this.max;
    }

    public void setMeaning(String meaning) {
        beforePropertyWrite("meaning", this.meaning, meaning);
        this.meaning = meaning;
    }

    public String getMeaning() {
        beforePropertyRead("meaning");
        return this.meaning;
    }

    public void setMin(BigDecimal min) {
        beforePropertyWrite("min", this.min, min);
        this.min = min;
    }

    public BigDecimal getMin() {
        beforePropertyRead("min");
        return this.min;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setRank(BigDecimal rank) {
        beforePropertyWrite("rank", this.rank, rank);
        this.rank = rank;
    }

    public BigDecimal getRank() {
        beforePropertyRead("rank");
        return this.rank;
    }

    public void setTableVersion(BigDecimal tableVersion) {
        beforePropertyWrite("tableVersion", this.tableVersion, tableVersion);
        this.tableVersion = tableVersion;
    }

    public BigDecimal getTableVersion() {
        beforePropertyRead("tableVersion");
        return this.tableVersion;
    }

    public void addToPtfDeployments(PtfDeployment obj) {
        addToManyTarget("ptfDeployments", obj, true);
    }

    public void removeFromPtfDeployments(PtfDeployment obj) {
        removeToManyTarget("ptfDeployments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfDeployment> getPtfDeployments() {
        return (List<PtfDeployment>)readProperty("ptfDeployments");
    }

    public void addToPtfDeployments1(PtfDeployment obj) {
        addToManyTarget("ptfDeployments1", obj, true);
    }

    public void removeFromPtfDeployments1(PtfDeployment obj) {
        removeToManyTarget("ptfDeployments1", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfDeployment> getPtfDeployments1() {
        return (List<PtfDeployment>)readProperty("ptfDeployments1");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "filter":
                return this.filter;
            case "fxy":
                return this.fxy;
            case "id":
                return this.id;
            case "localCentre":
                return this.localCentre;
            case "localSubCentre":
                return this.localSubCentre;
            case "masterTable":
                return this.masterTable;
            case "max":
                return this.max;
            case "meaning":
                return this.meaning;
            case "min":
                return this.min;
            case "nameShort":
                return this.nameShort;
            case "rank":
                return this.rank;
            case "tableVersion":
                return this.tableVersion;
            case "ptfDeployments":
                return this.ptfDeployments;
            case "ptfDeployments1":
                return this.ptfDeployments1;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "filter":
                this.filter = (BigDecimal)val;
                break;
            case "fxy":
                this.fxy = (String)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "localCentre":
                this.localCentre = (BigDecimal)val;
                break;
            case "localSubCentre":
                this.localSubCentre = (BigDecimal)val;
                break;
            case "masterTable":
                this.masterTable = (BigDecimal)val;
                break;
            case "max":
                this.max = (BigDecimal)val;
                break;
            case "meaning":
                this.meaning = (String)val;
                break;
            case "min":
                this.min = (BigDecimal)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "rank":
                this.rank = (BigDecimal)val;
                break;
            case "tableVersion":
                this.tableVersion = (BigDecimal)val;
                break;
            case "ptfDeployments":
                this.ptfDeployments = val;
                break;
            case "ptfDeployments1":
                this.ptfDeployments1 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.filter);
        out.writeObject(this.fxy);
        out.writeObject(this.id);
        out.writeObject(this.localCentre);
        out.writeObject(this.localSubCentre);
        out.writeObject(this.masterTable);
        out.writeObject(this.max);
        out.writeObject(this.meaning);
        out.writeObject(this.min);
        out.writeObject(this.nameShort);
        out.writeObject(this.rank);
        out.writeObject(this.tableVersion);
        out.writeObject(this.ptfDeployments);
        out.writeObject(this.ptfDeployments1);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.filter = (BigDecimal)in.readObject();
        this.fxy = (String)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.localCentre = (BigDecimal)in.readObject();
        this.localSubCentre = (BigDecimal)in.readObject();
        this.masterTable = (BigDecimal)in.readObject();
        this.max = (BigDecimal)in.readObject();
        this.meaning = (String)in.readObject();
        this.min = (BigDecimal)in.readObject();
        this.nameShort = (String)in.readObject();
        this.rank = (BigDecimal)in.readObject();
        this.tableVersion = (BigDecimal)in.readObject();
        this.ptfDeployments = in.readObject();
        this.ptfDeployments1 = in.readObject();
    }

}
