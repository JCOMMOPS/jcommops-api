package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.ObsVariableSub;
import org.oceanops.api.orm.PtfVariableSub;
import org.oceanops.api.orm.Variable;

/**
 * Class _VariableSub was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _VariableSub extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> CANONICAL_UNITS = PropertyFactory.createString("canonicalUnits", String.class);
    public static final StringProperty<String> DATA_SOURCE = PropertyFactory.createString("dataSource", String.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> REF = PropertyFactory.createString("ref", String.class);
    public static final ListProperty<ObsVariableSub> OBS_VARIABLE_SUBS = PropertyFactory.createList("obsVariableSubs", ObsVariableSub.class);
    public static final ListProperty<PtfVariableSub> PTF_VARIABLE_SUBS = PropertyFactory.createList("ptfVariableSubs", PtfVariableSub.class);
    public static final EntityProperty<Variable> VARIABLE = PropertyFactory.createEntity("variable", Variable.class);

    protected String canonicalUnits;
    protected String dataSource;
    protected String description;
    protected BigDecimal id;
    protected String name;
    protected String ref;

    protected Object obsVariableSubs;
    protected Object ptfVariableSubs;
    protected Object variable;

    public void setCanonicalUnits(String canonicalUnits) {
        beforePropertyWrite("canonicalUnits", this.canonicalUnits, canonicalUnits);
        this.canonicalUnits = canonicalUnits;
    }

    public String getCanonicalUnits() {
        beforePropertyRead("canonicalUnits");
        return this.canonicalUnits;
    }

    public void setDataSource(String dataSource) {
        beforePropertyWrite("dataSource", this.dataSource, dataSource);
        this.dataSource = dataSource;
    }

    public String getDataSource() {
        beforePropertyRead("dataSource");
        return this.dataSource;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setRef(String ref) {
        beforePropertyWrite("ref", this.ref, ref);
        this.ref = ref;
    }

    public String getRef() {
        beforePropertyRead("ref");
        return this.ref;
    }

    public void addToObsVariableSubs(ObsVariableSub obj) {
        addToManyTarget("obsVariableSubs", obj, true);
    }

    public void removeFromObsVariableSubs(ObsVariableSub obj) {
        removeToManyTarget("obsVariableSubs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsVariableSub> getObsVariableSubs() {
        return (List<ObsVariableSub>)readProperty("obsVariableSubs");
    }

    public void addToPtfVariableSubs(PtfVariableSub obj) {
        addToManyTarget("ptfVariableSubs", obj, true);
    }

    public void removeFromPtfVariableSubs(PtfVariableSub obj) {
        removeToManyTarget("ptfVariableSubs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfVariableSub> getPtfVariableSubs() {
        return (List<PtfVariableSub>)readProperty("ptfVariableSubs");
    }

    public void setVariable(Variable variable) {
        setToOneTarget("variable", variable, true);
    }

    public Variable getVariable() {
        return (Variable)readProperty("variable");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "canonicalUnits":
                return this.canonicalUnits;
            case "dataSource":
                return this.dataSource;
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "ref":
                return this.ref;
            case "obsVariableSubs":
                return this.obsVariableSubs;
            case "ptfVariableSubs":
                return this.ptfVariableSubs;
            case "variable":
                return this.variable;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "canonicalUnits":
                this.canonicalUnits = (String)val;
                break;
            case "dataSource":
                this.dataSource = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "ref":
                this.ref = (String)val;
                break;
            case "obsVariableSubs":
                this.obsVariableSubs = val;
                break;
            case "ptfVariableSubs":
                this.ptfVariableSubs = val;
                break;
            case "variable":
                this.variable = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.canonicalUnits);
        out.writeObject(this.dataSource);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.ref);
        out.writeObject(this.obsVariableSubs);
        out.writeObject(this.ptfVariableSubs);
        out.writeObject(this.variable);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.canonicalUnits = (String)in.readObject();
        this.dataSource = (String)in.readObject();
        this.description = (String)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.ref = (String)in.readObject();
        this.obsVariableSubs = in.readObject();
        this.ptfVariableSubs = in.readObject();
        this.variable = in.readObject();
    }

}
