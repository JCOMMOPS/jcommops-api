package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _WmoBlocks was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WmoBlocks extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> ALLOC_DATE = PropertyFactory.createDate("allocDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> ARGO = PropertyFactory.createNumeric("argo", BigDecimal.class);
    public static final NumericProperty<BigDecimal> COUNTRY_ID = PropertyFactory.createNumeric("countryId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> FULL = PropertyFactory.createNumeric("full", BigDecimal.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MASTERBLOCK_ID = PropertyFactory.createNumeric("masterblockId", BigDecimal.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<BigDecimal> STOCK = PropertyFactory.createNumeric("stock", BigDecimal.class);
    public static final StringProperty<String> WMO_END = PropertyFactory.createString("wmoEnd", String.class);
    public static final StringProperty<String> WMO_START = PropertyFactory.createString("wmoStart", String.class);
    public static final NumericProperty<BigDecimal> WMOREQ_ID = PropertyFactory.createNumeric("wmoreqId", BigDecimal.class);

    protected LocalDateTime allocDate;
    protected BigDecimal argo;
    protected BigDecimal countryId;
    protected BigDecimal full;
    protected BigDecimal id;
    protected BigDecimal masterblockId;
    protected String name;
    protected BigDecimal stock;
    protected String wmoEnd;
    protected String wmoStart;
    protected BigDecimal wmoreqId;


    public void setAllocDate(LocalDateTime allocDate) {
        beforePropertyWrite("allocDate", this.allocDate, allocDate);
        this.allocDate = allocDate;
    }

    public LocalDateTime getAllocDate() {
        beforePropertyRead("allocDate");
        return this.allocDate;
    }

    public void setArgo(BigDecimal argo) {
        beforePropertyWrite("argo", this.argo, argo);
        this.argo = argo;
    }

    public BigDecimal getArgo() {
        beforePropertyRead("argo");
        return this.argo;
    }

    public void setCountryId(BigDecimal countryId) {
        beforePropertyWrite("countryId", this.countryId, countryId);
        this.countryId = countryId;
    }

    public BigDecimal getCountryId() {
        beforePropertyRead("countryId");
        return this.countryId;
    }

    public void setFull(BigDecimal full) {
        beforePropertyWrite("full", this.full, full);
        this.full = full;
    }

    public BigDecimal getFull() {
        beforePropertyRead("full");
        return this.full;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setMasterblockId(BigDecimal masterblockId) {
        beforePropertyWrite("masterblockId", this.masterblockId, masterblockId);
        this.masterblockId = masterblockId;
    }

    public BigDecimal getMasterblockId() {
        beforePropertyRead("masterblockId");
        return this.masterblockId;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setStock(BigDecimal stock) {
        beforePropertyWrite("stock", this.stock, stock);
        this.stock = stock;
    }

    public BigDecimal getStock() {
        beforePropertyRead("stock");
        return this.stock;
    }

    public void setWmoEnd(String wmoEnd) {
        beforePropertyWrite("wmoEnd", this.wmoEnd, wmoEnd);
        this.wmoEnd = wmoEnd;
    }

    public String getWmoEnd() {
        beforePropertyRead("wmoEnd");
        return this.wmoEnd;
    }

    public void setWmoStart(String wmoStart) {
        beforePropertyWrite("wmoStart", this.wmoStart, wmoStart);
        this.wmoStart = wmoStart;
    }

    public String getWmoStart() {
        beforePropertyRead("wmoStart");
        return this.wmoStart;
    }

    public void setWmoreqId(BigDecimal wmoreqId) {
        beforePropertyWrite("wmoreqId", this.wmoreqId, wmoreqId);
        this.wmoreqId = wmoreqId;
    }

    public BigDecimal getWmoreqId() {
        beforePropertyRead("wmoreqId");
        return this.wmoreqId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "allocDate":
                return this.allocDate;
            case "argo":
                return this.argo;
            case "countryId":
                return this.countryId;
            case "full":
                return this.full;
            case "id":
                return this.id;
            case "masterblockId":
                return this.masterblockId;
            case "name":
                return this.name;
            case "stock":
                return this.stock;
            case "wmoEnd":
                return this.wmoEnd;
            case "wmoStart":
                return this.wmoStart;
            case "wmoreqId":
                return this.wmoreqId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "allocDate":
                this.allocDate = (LocalDateTime)val;
                break;
            case "argo":
                this.argo = (BigDecimal)val;
                break;
            case "countryId":
                this.countryId = (BigDecimal)val;
                break;
            case "full":
                this.full = (BigDecimal)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "masterblockId":
                this.masterblockId = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "stock":
                this.stock = (BigDecimal)val;
                break;
            case "wmoEnd":
                this.wmoEnd = (String)val;
                break;
            case "wmoStart":
                this.wmoStart = (String)val;
                break;
            case "wmoreqId":
                this.wmoreqId = (BigDecimal)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.allocDate);
        out.writeObject(this.argo);
        out.writeObject(this.countryId);
        out.writeObject(this.full);
        out.writeObject(this.id);
        out.writeObject(this.masterblockId);
        out.writeObject(this.name);
        out.writeObject(this.stock);
        out.writeObject(this.wmoEnd);
        out.writeObject(this.wmoStart);
        out.writeObject(this.wmoreqId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.allocDate = (LocalDateTime)in.readObject();
        this.argo = (BigDecimal)in.readObject();
        this.countryId = (BigDecimal)in.readObject();
        this.full = (BigDecimal)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.masterblockId = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.stock = (BigDecimal)in.readObject();
        this.wmoEnd = (String)in.readObject();
        this.wmoStart = (String)in.readObject();
        this.wmoreqId = (BigDecimal)in.readObject();
    }

}
