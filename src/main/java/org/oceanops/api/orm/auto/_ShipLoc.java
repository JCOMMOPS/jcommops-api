package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Ship;

/**
 * Class _ShipLoc was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ShipLoc extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final DateProperty<LocalDateTime> LOC_DATE = PropertyFactory.createDate("locDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> LOC_QUALITY = PropertyFactory.createNumeric("locQuality", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LOC_SYSTEM_ID = PropertyFactory.createNumeric("locSystemId", BigDecimal.class);
    public static final EntityProperty<Ship> SHIP = PropertyFactory.createEntity("ship", Ship.class);

    protected BigDecimal id;
    protected LocalDateTime locDate;
    protected BigDecimal locQuality;
    protected BigDecimal locSystemId;

    protected Object ship;

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLocDate(LocalDateTime locDate) {
        beforePropertyWrite("locDate", this.locDate, locDate);
        this.locDate = locDate;
    }

    public LocalDateTime getLocDate() {
        beforePropertyRead("locDate");
        return this.locDate;
    }

    public void setLocQuality(BigDecimal locQuality) {
        beforePropertyWrite("locQuality", this.locQuality, locQuality);
        this.locQuality = locQuality;
    }

    public BigDecimal getLocQuality() {
        beforePropertyRead("locQuality");
        return this.locQuality;
    }

    public void setLocSystemId(BigDecimal locSystemId) {
        beforePropertyWrite("locSystemId", this.locSystemId, locSystemId);
        this.locSystemId = locSystemId;
    }

    public BigDecimal getLocSystemId() {
        beforePropertyRead("locSystemId");
        return this.locSystemId;
    }

    public void setShip(Ship ship) {
        setToOneTarget("ship", ship, true);
    }

    public Ship getShip() {
        return (Ship)readProperty("ship");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "id":
                return this.id;
            case "locDate":
                return this.locDate;
            case "locQuality":
                return this.locQuality;
            case "locSystemId":
                return this.locSystemId;
            case "ship":
                return this.ship;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "locDate":
                this.locDate = (LocalDateTime)val;
                break;
            case "locQuality":
                this.locQuality = (BigDecimal)val;
                break;
            case "locSystemId":
                this.locSystemId = (BigDecimal)val;
                break;
            case "ship":
                this.ship = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.id);
        out.writeObject(this.locDate);
        out.writeObject(this.locQuality);
        out.writeObject(this.locSystemId);
        out.writeObject(this.ship);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.id = (BigDecimal)in.readObject();
        this.locDate = (LocalDateTime)in.readObject();
        this.locQuality = (BigDecimal)in.readObject();
        this.locSystemId = (BigDecimal)in.readObject();
        this.ship = in.readObject();
    }

}
