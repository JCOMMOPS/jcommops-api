package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.LineSurvey;

/**
 * Class _LineType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LineType extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> COMMENTS = PropertyFactory.createString("comments", String.class);
    public static final NumericProperty<BigDecimal> DROPS = PropertyFactory.createNumeric("drops", BigDecimal.class);
    public static final NumericProperty<BigDecimal> HORIZ_RES_BOXES = PropertyFactory.createNumeric("horizResBoxes", BigDecimal.class);
    public static final NumericProperty<BigDecimal> HORIZ_RESOL_DEG = PropertyFactory.createNumeric("horizResolDeg", BigDecimal.class);
    public static final NumericProperty<BigDecimal> HORIZ_RESOL_HR = PropertyFactory.createNumeric("horizResolHr", BigDecimal.class);
    public static final NumericProperty<BigDecimal> HORIZ_RESOL_KM = PropertyFactory.createNumeric("horizResolKm", BigDecimal.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX_HORIZ_RES = PropertyFactory.createNumeric("maxHorizRes", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX_HORIZ_RES_I4 = PropertyFactory.createNumeric("maxHorizResI4", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX_NB_TRANS12 = PropertyFactory.createNumeric("maxNbTrans12", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX_NB_TRANS6 = PropertyFactory.createNumeric("maxNbTrans6", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX_SD_HORIZ_RES = PropertyFactory.createNumeric("maxSdHorizRes", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MAX_SD_PERIOD = PropertyFactory.createNumeric("maxSdPeriod", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MIN_HORIZ_RES = PropertyFactory.createNumeric("minHorizRes", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MIN_HORIZ_RES_I4 = PropertyFactory.createNumeric("minHorizResI4", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MIN_NB_TRANS12 = PropertyFactory.createNumeric("minNbTrans12", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MIN_NB_TRANS6 = PropertyFactory.createNumeric("minNbTrans6", BigDecimal.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_LONG = PropertyFactory.createString("nameLong", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<BigDecimal> PERCENT_BOXES = PropertyFactory.createNumeric("percentBoxes", BigDecimal.class);
    public static final NumericProperty<BigDecimal> PERCENT_GOOD_TR = PropertyFactory.createNumeric("percentGoodTr", BigDecimal.class);
    public static final NumericProperty<BigDecimal> PERIOD_TOLERANCE = PropertyFactory.createNumeric("periodTolerance", BigDecimal.class);
    public static final NumericProperty<BigDecimal> TRANSECTS = PropertyFactory.createNumeric("transects", BigDecimal.class);
    public static final ListProperty<LineSurvey> LINE_SURVEYS = PropertyFactory.createList("lineSurveys", LineSurvey.class);

    protected String comments;
    protected BigDecimal drops;
    protected BigDecimal horizResBoxes;
    protected BigDecimal horizResolDeg;
    protected BigDecimal horizResolHr;
    protected BigDecimal horizResolKm;
    protected BigDecimal id;
    protected BigDecimal maxHorizRes;
    protected BigDecimal maxHorizResI4;
    protected BigDecimal maxNbTrans12;
    protected BigDecimal maxNbTrans6;
    protected BigDecimal maxSdHorizRes;
    protected BigDecimal maxSdPeriod;
    protected BigDecimal minHorizRes;
    protected BigDecimal minHorizResI4;
    protected BigDecimal minNbTrans12;
    protected BigDecimal minNbTrans6;
    protected String name;
    protected String nameLong;
    protected String nameShort;
    protected BigDecimal percentBoxes;
    protected BigDecimal percentGoodTr;
    protected BigDecimal periodTolerance;
    protected BigDecimal transects;

    protected Object lineSurveys;

    public void setComments(String comments) {
        beforePropertyWrite("comments", this.comments, comments);
        this.comments = comments;
    }

    public String getComments() {
        beforePropertyRead("comments");
        return this.comments;
    }

    public void setDrops(BigDecimal drops) {
        beforePropertyWrite("drops", this.drops, drops);
        this.drops = drops;
    }

    public BigDecimal getDrops() {
        beforePropertyRead("drops");
        return this.drops;
    }

    public void setHorizResBoxes(BigDecimal horizResBoxes) {
        beforePropertyWrite("horizResBoxes", this.horizResBoxes, horizResBoxes);
        this.horizResBoxes = horizResBoxes;
    }

    public BigDecimal getHorizResBoxes() {
        beforePropertyRead("horizResBoxes");
        return this.horizResBoxes;
    }

    public void setHorizResolDeg(BigDecimal horizResolDeg) {
        beforePropertyWrite("horizResolDeg", this.horizResolDeg, horizResolDeg);
        this.horizResolDeg = horizResolDeg;
    }

    public BigDecimal getHorizResolDeg() {
        beforePropertyRead("horizResolDeg");
        return this.horizResolDeg;
    }

    public void setHorizResolHr(BigDecimal horizResolHr) {
        beforePropertyWrite("horizResolHr", this.horizResolHr, horizResolHr);
        this.horizResolHr = horizResolHr;
    }

    public BigDecimal getHorizResolHr() {
        beforePropertyRead("horizResolHr");
        return this.horizResolHr;
    }

    public void setHorizResolKm(BigDecimal horizResolKm) {
        beforePropertyWrite("horizResolKm", this.horizResolKm, horizResolKm);
        this.horizResolKm = horizResolKm;
    }

    public BigDecimal getHorizResolKm() {
        beforePropertyRead("horizResolKm");
        return this.horizResolKm;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setMaxHorizRes(BigDecimal maxHorizRes) {
        beforePropertyWrite("maxHorizRes", this.maxHorizRes, maxHorizRes);
        this.maxHorizRes = maxHorizRes;
    }

    public BigDecimal getMaxHorizRes() {
        beforePropertyRead("maxHorizRes");
        return this.maxHorizRes;
    }

    public void setMaxHorizResI4(BigDecimal maxHorizResI4) {
        beforePropertyWrite("maxHorizResI4", this.maxHorizResI4, maxHorizResI4);
        this.maxHorizResI4 = maxHorizResI4;
    }

    public BigDecimal getMaxHorizResI4() {
        beforePropertyRead("maxHorizResI4");
        return this.maxHorizResI4;
    }

    public void setMaxNbTrans12(BigDecimal maxNbTrans12) {
        beforePropertyWrite("maxNbTrans12", this.maxNbTrans12, maxNbTrans12);
        this.maxNbTrans12 = maxNbTrans12;
    }

    public BigDecimal getMaxNbTrans12() {
        beforePropertyRead("maxNbTrans12");
        return this.maxNbTrans12;
    }

    public void setMaxNbTrans6(BigDecimal maxNbTrans6) {
        beforePropertyWrite("maxNbTrans6", this.maxNbTrans6, maxNbTrans6);
        this.maxNbTrans6 = maxNbTrans6;
    }

    public BigDecimal getMaxNbTrans6() {
        beforePropertyRead("maxNbTrans6");
        return this.maxNbTrans6;
    }

    public void setMaxSdHorizRes(BigDecimal maxSdHorizRes) {
        beforePropertyWrite("maxSdHorizRes", this.maxSdHorizRes, maxSdHorizRes);
        this.maxSdHorizRes = maxSdHorizRes;
    }

    public BigDecimal getMaxSdHorizRes() {
        beforePropertyRead("maxSdHorizRes");
        return this.maxSdHorizRes;
    }

    public void setMaxSdPeriod(BigDecimal maxSdPeriod) {
        beforePropertyWrite("maxSdPeriod", this.maxSdPeriod, maxSdPeriod);
        this.maxSdPeriod = maxSdPeriod;
    }

    public BigDecimal getMaxSdPeriod() {
        beforePropertyRead("maxSdPeriod");
        return this.maxSdPeriod;
    }

    public void setMinHorizRes(BigDecimal minHorizRes) {
        beforePropertyWrite("minHorizRes", this.minHorizRes, minHorizRes);
        this.minHorizRes = minHorizRes;
    }

    public BigDecimal getMinHorizRes() {
        beforePropertyRead("minHorizRes");
        return this.minHorizRes;
    }

    public void setMinHorizResI4(BigDecimal minHorizResI4) {
        beforePropertyWrite("minHorizResI4", this.minHorizResI4, minHorizResI4);
        this.minHorizResI4 = minHorizResI4;
    }

    public BigDecimal getMinHorizResI4() {
        beforePropertyRead("minHorizResI4");
        return this.minHorizResI4;
    }

    public void setMinNbTrans12(BigDecimal minNbTrans12) {
        beforePropertyWrite("minNbTrans12", this.minNbTrans12, minNbTrans12);
        this.minNbTrans12 = minNbTrans12;
    }

    public BigDecimal getMinNbTrans12() {
        beforePropertyRead("minNbTrans12");
        return this.minNbTrans12;
    }

    public void setMinNbTrans6(BigDecimal minNbTrans6) {
        beforePropertyWrite("minNbTrans6", this.minNbTrans6, minNbTrans6);
        this.minNbTrans6 = minNbTrans6;
    }

    public BigDecimal getMinNbTrans6() {
        beforePropertyRead("minNbTrans6");
        return this.minNbTrans6;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameLong(String nameLong) {
        beforePropertyWrite("nameLong", this.nameLong, nameLong);
        this.nameLong = nameLong;
    }

    public String getNameLong() {
        beforePropertyRead("nameLong");
        return this.nameLong;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setPercentBoxes(BigDecimal percentBoxes) {
        beforePropertyWrite("percentBoxes", this.percentBoxes, percentBoxes);
        this.percentBoxes = percentBoxes;
    }

    public BigDecimal getPercentBoxes() {
        beforePropertyRead("percentBoxes");
        return this.percentBoxes;
    }

    public void setPercentGoodTr(BigDecimal percentGoodTr) {
        beforePropertyWrite("percentGoodTr", this.percentGoodTr, percentGoodTr);
        this.percentGoodTr = percentGoodTr;
    }

    public BigDecimal getPercentGoodTr() {
        beforePropertyRead("percentGoodTr");
        return this.percentGoodTr;
    }

    public void setPeriodTolerance(BigDecimal periodTolerance) {
        beforePropertyWrite("periodTolerance", this.periodTolerance, periodTolerance);
        this.periodTolerance = periodTolerance;
    }

    public BigDecimal getPeriodTolerance() {
        beforePropertyRead("periodTolerance");
        return this.periodTolerance;
    }

    public void setTransects(BigDecimal transects) {
        beforePropertyWrite("transects", this.transects, transects);
        this.transects = transects;
    }

    public BigDecimal getTransects() {
        beforePropertyRead("transects");
        return this.transects;
    }

    public void addToLineSurveys(LineSurvey obj) {
        addToManyTarget("lineSurveys", obj, true);
    }

    public void removeFromLineSurveys(LineSurvey obj) {
        removeToManyTarget("lineSurveys", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LineSurvey> getLineSurveys() {
        return (List<LineSurvey>)readProperty("lineSurveys");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "comments":
                return this.comments;
            case "drops":
                return this.drops;
            case "horizResBoxes":
                return this.horizResBoxes;
            case "horizResolDeg":
                return this.horizResolDeg;
            case "horizResolHr":
                return this.horizResolHr;
            case "horizResolKm":
                return this.horizResolKm;
            case "id":
                return this.id;
            case "maxHorizRes":
                return this.maxHorizRes;
            case "maxHorizResI4":
                return this.maxHorizResI4;
            case "maxNbTrans12":
                return this.maxNbTrans12;
            case "maxNbTrans6":
                return this.maxNbTrans6;
            case "maxSdHorizRes":
                return this.maxSdHorizRes;
            case "maxSdPeriod":
                return this.maxSdPeriod;
            case "minHorizRes":
                return this.minHorizRes;
            case "minHorizResI4":
                return this.minHorizResI4;
            case "minNbTrans12":
                return this.minNbTrans12;
            case "minNbTrans6":
                return this.minNbTrans6;
            case "name":
                return this.name;
            case "nameLong":
                return this.nameLong;
            case "nameShort":
                return this.nameShort;
            case "percentBoxes":
                return this.percentBoxes;
            case "percentGoodTr":
                return this.percentGoodTr;
            case "periodTolerance":
                return this.periodTolerance;
            case "transects":
                return this.transects;
            case "lineSurveys":
                return this.lineSurveys;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "comments":
                this.comments = (String)val;
                break;
            case "drops":
                this.drops = (BigDecimal)val;
                break;
            case "horizResBoxes":
                this.horizResBoxes = (BigDecimal)val;
                break;
            case "horizResolDeg":
                this.horizResolDeg = (BigDecimal)val;
                break;
            case "horizResolHr":
                this.horizResolHr = (BigDecimal)val;
                break;
            case "horizResolKm":
                this.horizResolKm = (BigDecimal)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "maxHorizRes":
                this.maxHorizRes = (BigDecimal)val;
                break;
            case "maxHorizResI4":
                this.maxHorizResI4 = (BigDecimal)val;
                break;
            case "maxNbTrans12":
                this.maxNbTrans12 = (BigDecimal)val;
                break;
            case "maxNbTrans6":
                this.maxNbTrans6 = (BigDecimal)val;
                break;
            case "maxSdHorizRes":
                this.maxSdHorizRes = (BigDecimal)val;
                break;
            case "maxSdPeriod":
                this.maxSdPeriod = (BigDecimal)val;
                break;
            case "minHorizRes":
                this.minHorizRes = (BigDecimal)val;
                break;
            case "minHorizResI4":
                this.minHorizResI4 = (BigDecimal)val;
                break;
            case "minNbTrans12":
                this.minNbTrans12 = (BigDecimal)val;
                break;
            case "minNbTrans6":
                this.minNbTrans6 = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameLong":
                this.nameLong = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "percentBoxes":
                this.percentBoxes = (BigDecimal)val;
                break;
            case "percentGoodTr":
                this.percentGoodTr = (BigDecimal)val;
                break;
            case "periodTolerance":
                this.periodTolerance = (BigDecimal)val;
                break;
            case "transects":
                this.transects = (BigDecimal)val;
                break;
            case "lineSurveys":
                this.lineSurveys = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.comments);
        out.writeObject(this.drops);
        out.writeObject(this.horizResBoxes);
        out.writeObject(this.horizResolDeg);
        out.writeObject(this.horizResolHr);
        out.writeObject(this.horizResolKm);
        out.writeObject(this.id);
        out.writeObject(this.maxHorizRes);
        out.writeObject(this.maxHorizResI4);
        out.writeObject(this.maxNbTrans12);
        out.writeObject(this.maxNbTrans6);
        out.writeObject(this.maxSdHorizRes);
        out.writeObject(this.maxSdPeriod);
        out.writeObject(this.minHorizRes);
        out.writeObject(this.minHorizResI4);
        out.writeObject(this.minNbTrans12);
        out.writeObject(this.minNbTrans6);
        out.writeObject(this.name);
        out.writeObject(this.nameLong);
        out.writeObject(this.nameShort);
        out.writeObject(this.percentBoxes);
        out.writeObject(this.percentGoodTr);
        out.writeObject(this.periodTolerance);
        out.writeObject(this.transects);
        out.writeObject(this.lineSurveys);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.comments = (String)in.readObject();
        this.drops = (BigDecimal)in.readObject();
        this.horizResBoxes = (BigDecimal)in.readObject();
        this.horizResolDeg = (BigDecimal)in.readObject();
        this.horizResolHr = (BigDecimal)in.readObject();
        this.horizResolKm = (BigDecimal)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.maxHorizRes = (BigDecimal)in.readObject();
        this.maxHorizResI4 = (BigDecimal)in.readObject();
        this.maxNbTrans12 = (BigDecimal)in.readObject();
        this.maxNbTrans6 = (BigDecimal)in.readObject();
        this.maxSdHorizRes = (BigDecimal)in.readObject();
        this.maxSdPeriod = (BigDecimal)in.readObject();
        this.minHorizRes = (BigDecimal)in.readObject();
        this.minHorizResI4 = (BigDecimal)in.readObject();
        this.minNbTrans12 = (BigDecimal)in.readObject();
        this.minNbTrans6 = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.nameLong = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.percentBoxes = (BigDecimal)in.readObject();
        this.percentGoodTr = (BigDecimal)in.readObject();
        this.periodTolerance = (BigDecimal)in.readObject();
        this.transects = (BigDecimal)in.readObject();
        this.lineSurveys = in.readObject();
    }

}
