package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.IndicatorCategory;
import org.oceanops.api.orm.Network;

/**
 * Class _Indicator was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Indicator extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<BigDecimal> BASIN_ID = PropertyFactory.createNumeric("basinId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> CORE = PropertyFactory.createNumeric("core", BigDecimal.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> EXPLANATION = PropertyFactory.createString("explanation", String.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LEGEND_MAX = PropertyFactory.createNumeric("legendMax", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LEGEND_MIN = PropertyFactory.createNumeric("legendMin", BigDecimal.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<BigDecimal> NONDEFAULT = PropertyFactory.createNumeric("nondefault", BigDecimal.class);
    public static final NumericProperty<BigDecimal> PERCENTAGE = PropertyFactory.createNumeric("percentage", BigDecimal.class);
    public static final NumericProperty<BigDecimal> RANK = PropertyFactory.createNumeric("rank", BigDecimal.class);
    public static final StringProperty<String> TARGET_TEXT = PropertyFactory.createString("targetText", String.class);
    public static final NumericProperty<BigDecimal> TARGET_VALUE = PropertyFactory.createNumeric("targetValue", BigDecimal.class);
    public static final EntityProperty<IndicatorCategory> INDICATOR_CATEGORY = PropertyFactory.createEntity("indicatorCategory", IndicatorCategory.class);
    public static final EntityProperty<Network> MASTER_NETWORK = PropertyFactory.createEntity("masterNetwork", Network.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);

    protected BigDecimal basinId;
    protected BigDecimal core;
    protected String description;
    protected String explanation;
    protected BigDecimal id;
    protected BigDecimal legendMax;
    protected BigDecimal legendMin;
    protected String name;
    protected BigDecimal nondefault;
    protected BigDecimal percentage;
    protected BigDecimal rank;
    protected String targetText;
    protected BigDecimal targetValue;

    protected Object indicatorCategory;
    protected Object masterNetwork;
    protected Object network;

    public void setBasinId(BigDecimal basinId) {
        beforePropertyWrite("basinId", this.basinId, basinId);
        this.basinId = basinId;
    }

    public BigDecimal getBasinId() {
        beforePropertyRead("basinId");
        return this.basinId;
    }

    public void setCore(BigDecimal core) {
        beforePropertyWrite("core", this.core, core);
        this.core = core;
    }

    public BigDecimal getCore() {
        beforePropertyRead("core");
        return this.core;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setExplanation(String explanation) {
        beforePropertyWrite("explanation", this.explanation, explanation);
        this.explanation = explanation;
    }

    public String getExplanation() {
        beforePropertyRead("explanation");
        return this.explanation;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLegendMax(BigDecimal legendMax) {
        beforePropertyWrite("legendMax", this.legendMax, legendMax);
        this.legendMax = legendMax;
    }

    public BigDecimal getLegendMax() {
        beforePropertyRead("legendMax");
        return this.legendMax;
    }

    public void setLegendMin(BigDecimal legendMin) {
        beforePropertyWrite("legendMin", this.legendMin, legendMin);
        this.legendMin = legendMin;
    }

    public BigDecimal getLegendMin() {
        beforePropertyRead("legendMin");
        return this.legendMin;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNondefault(BigDecimal nondefault) {
        beforePropertyWrite("nondefault", this.nondefault, nondefault);
        this.nondefault = nondefault;
    }

    public BigDecimal getNondefault() {
        beforePropertyRead("nondefault");
        return this.nondefault;
    }

    public void setPercentage(BigDecimal percentage) {
        beforePropertyWrite("percentage", this.percentage, percentage);
        this.percentage = percentage;
    }

    public BigDecimal getPercentage() {
        beforePropertyRead("percentage");
        return this.percentage;
    }

    public void setRank(BigDecimal rank) {
        beforePropertyWrite("rank", this.rank, rank);
        this.rank = rank;
    }

    public BigDecimal getRank() {
        beforePropertyRead("rank");
        return this.rank;
    }

    public void setTargetText(String targetText) {
        beforePropertyWrite("targetText", this.targetText, targetText);
        this.targetText = targetText;
    }

    public String getTargetText() {
        beforePropertyRead("targetText");
        return this.targetText;
    }

    public void setTargetValue(BigDecimal targetValue) {
        beforePropertyWrite("targetValue", this.targetValue, targetValue);
        this.targetValue = targetValue;
    }

    public BigDecimal getTargetValue() {
        beforePropertyRead("targetValue");
        return this.targetValue;
    }

    public void setIndicatorCategory(IndicatorCategory indicatorCategory) {
        setToOneTarget("indicatorCategory", indicatorCategory, true);
    }

    public IndicatorCategory getIndicatorCategory() {
        return (IndicatorCategory)readProperty("indicatorCategory");
    }

    public void setMasterNetwork(Network masterNetwork) {
        setToOneTarget("masterNetwork", masterNetwork, true);
    }

    public Network getMasterNetwork() {
        return (Network)readProperty("masterNetwork");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "basinId":
                return this.basinId;
            case "core":
                return this.core;
            case "description":
                return this.description;
            case "explanation":
                return this.explanation;
            case "id":
                return this.id;
            case "legendMax":
                return this.legendMax;
            case "legendMin":
                return this.legendMin;
            case "name":
                return this.name;
            case "nondefault":
                return this.nondefault;
            case "percentage":
                return this.percentage;
            case "rank":
                return this.rank;
            case "targetText":
                return this.targetText;
            case "targetValue":
                return this.targetValue;
            case "indicatorCategory":
                return this.indicatorCategory;
            case "masterNetwork":
                return this.masterNetwork;
            case "network":
                return this.network;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "basinId":
                this.basinId = (BigDecimal)val;
                break;
            case "core":
                this.core = (BigDecimal)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "explanation":
                this.explanation = (String)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "legendMax":
                this.legendMax = (BigDecimal)val;
                break;
            case "legendMin":
                this.legendMin = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nondefault":
                this.nondefault = (BigDecimal)val;
                break;
            case "percentage":
                this.percentage = (BigDecimal)val;
                break;
            case "rank":
                this.rank = (BigDecimal)val;
                break;
            case "targetText":
                this.targetText = (String)val;
                break;
            case "targetValue":
                this.targetValue = (BigDecimal)val;
                break;
            case "indicatorCategory":
                this.indicatorCategory = val;
                break;
            case "masterNetwork":
                this.masterNetwork = val;
                break;
            case "network":
                this.network = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.basinId);
        out.writeObject(this.core);
        out.writeObject(this.description);
        out.writeObject(this.explanation);
        out.writeObject(this.id);
        out.writeObject(this.legendMax);
        out.writeObject(this.legendMin);
        out.writeObject(this.name);
        out.writeObject(this.nondefault);
        out.writeObject(this.percentage);
        out.writeObject(this.rank);
        out.writeObject(this.targetText);
        out.writeObject(this.targetValue);
        out.writeObject(this.indicatorCategory);
        out.writeObject(this.masterNetwork);
        out.writeObject(this.network);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.basinId = (BigDecimal)in.readObject();
        this.core = (BigDecimal)in.readObject();
        this.description = (String)in.readObject();
        this.explanation = (String)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.legendMax = (BigDecimal)in.readObject();
        this.legendMin = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.nondefault = (BigDecimal)in.readObject();
        this.percentage = (BigDecimal)in.readObject();
        this.rank = (BigDecimal)in.readObject();
        this.targetText = (String)in.readObject();
        this.targetValue = (BigDecimal)in.readObject();
        this.indicatorCategory = in.readObject();
        this.masterNetwork = in.readObject();
        this.network = in.readObject();
    }

}
