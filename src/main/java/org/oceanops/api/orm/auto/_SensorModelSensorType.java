package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.SensorModel;
import org.oceanops.api.orm.SensorType;

/**
 * Class _SensorModelSensorType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SensorModelSensorType extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String SENSOR_MODEL_ID_PK_COLUMN = "SENSOR_MODEL_ID";
    public static final String SENSOR_TYPE_ID_PK_COLUMN = "SENSOR_TYPE_ID";

    public static final StringProperty<String> ACCURACY = PropertyFactory.createString("accuracy", String.class);
    public static final NumericProperty<BigDecimal> HIGH = PropertyFactory.createNumeric("high", BigDecimal.class);
    public static final NumericProperty<BigDecimal> LOW = PropertyFactory.createNumeric("low", BigDecimal.class);
    public static final NumericProperty<BigDecimal> SENSOR_MODEL_ID = PropertyFactory.createNumeric("sensorModelId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> SENSOR_TYPE_ID = PropertyFactory.createNumeric("sensorTypeId", BigDecimal.class);
    public static final StringProperty<String> UNIT = PropertyFactory.createString("unit", String.class);
    public static final EntityProperty<SensorModel> SENSOR_MODEL = PropertyFactory.createEntity("sensorModel", SensorModel.class);
    public static final EntityProperty<SensorType> SENSOR_TYPE = PropertyFactory.createEntity("sensorType", SensorType.class);

    protected String accuracy;
    protected BigDecimal high;
    protected BigDecimal low;
    protected BigDecimal sensorModelId;
    protected BigDecimal sensorTypeId;
    protected String unit;

    protected Object sensorModel;
    protected Object sensorType;

    public void setAccuracy(String accuracy) {
        beforePropertyWrite("accuracy", this.accuracy, accuracy);
        this.accuracy = accuracy;
    }

    public String getAccuracy() {
        beforePropertyRead("accuracy");
        return this.accuracy;
    }

    public void setHigh(BigDecimal high) {
        beforePropertyWrite("high", this.high, high);
        this.high = high;
    }

    public BigDecimal getHigh() {
        beforePropertyRead("high");
        return this.high;
    }

    public void setLow(BigDecimal low) {
        beforePropertyWrite("low", this.low, low);
        this.low = low;
    }

    public BigDecimal getLow() {
        beforePropertyRead("low");
        return this.low;
    }

    public void setSensorModelId(BigDecimal sensorModelId) {
        beforePropertyWrite("sensorModelId", this.sensorModelId, sensorModelId);
        this.sensorModelId = sensorModelId;
    }

    public BigDecimal getSensorModelId() {
        beforePropertyRead("sensorModelId");
        return this.sensorModelId;
    }

    public void setSensorTypeId(BigDecimal sensorTypeId) {
        beforePropertyWrite("sensorTypeId", this.sensorTypeId, sensorTypeId);
        this.sensorTypeId = sensorTypeId;
    }

    public BigDecimal getSensorTypeId() {
        beforePropertyRead("sensorTypeId");
        return this.sensorTypeId;
    }

    public void setUnit(String unit) {
        beforePropertyWrite("unit", this.unit, unit);
        this.unit = unit;
    }

    public String getUnit() {
        beforePropertyRead("unit");
        return this.unit;
    }

    public void setSensorModel(SensorModel sensorModel) {
        setToOneTarget("sensorModel", sensorModel, true);
    }

    public SensorModel getSensorModel() {
        return (SensorModel)readProperty("sensorModel");
    }

    public void setSensorType(SensorType sensorType) {
        setToOneTarget("sensorType", sensorType, true);
    }

    public SensorType getSensorType() {
        return (SensorType)readProperty("sensorType");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "accuracy":
                return this.accuracy;
            case "high":
                return this.high;
            case "low":
                return this.low;
            case "sensorModelId":
                return this.sensorModelId;
            case "sensorTypeId":
                return this.sensorTypeId;
            case "unit":
                return this.unit;
            case "sensorModel":
                return this.sensorModel;
            case "sensorType":
                return this.sensorType;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "accuracy":
                this.accuracy = (String)val;
                break;
            case "high":
                this.high = (BigDecimal)val;
                break;
            case "low":
                this.low = (BigDecimal)val;
                break;
            case "sensorModelId":
                this.sensorModelId = (BigDecimal)val;
                break;
            case "sensorTypeId":
                this.sensorTypeId = (BigDecimal)val;
                break;
            case "unit":
                this.unit = (String)val;
                break;
            case "sensorModel":
                this.sensorModel = val;
                break;
            case "sensorType":
                this.sensorType = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.accuracy);
        out.writeObject(this.high);
        out.writeObject(this.low);
        out.writeObject(this.sensorModelId);
        out.writeObject(this.sensorTypeId);
        out.writeObject(this.unit);
        out.writeObject(this.sensorModel);
        out.writeObject(this.sensorType);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.accuracy = (String)in.readObject();
        this.high = (BigDecimal)in.readObject();
        this.low = (BigDecimal)in.readObject();
        this.sensorModelId = (BigDecimal)in.readObject();
        this.sensorTypeId = (BigDecimal)in.readObject();
        this.unit = (String)in.readObject();
        this.sensorModel = in.readObject();
        this.sensorType = in.readObject();
    }

}
