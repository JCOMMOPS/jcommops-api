package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.DacType;
import org.oceanops.api.orm.Network;
import org.oceanops.api.orm.Weblink;

/**
 * Class _AgencyDacType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AgencyDacType extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String AGENCY_ID_PK_COLUMN = "AGENCY_ID";
    public static final String DAC_TYPE_ID_PK_COLUMN = "DAC_TYPE_ID";
    public static final String NETWORK_ID_PK_COLUMN = "NETWORK_ID";

    public static final NumericProperty<BigDecimal> AGENCY_ID = PropertyFactory.createNumeric("agencyId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> DAC_TYPE_ID = PropertyFactory.createNumeric("dacTypeId", BigDecimal.class);
    public static final StringProperty<String> DATA_PATH = PropertyFactory.createString("dataPath", String.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<BigDecimal> MASTER_PROGRAM_ID = PropertyFactory.createNumeric("masterProgramId", BigDecimal.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<BigDecimal> NETWORK_ID = PropertyFactory.createNumeric("networkId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> OLD_DAC_ID = PropertyFactory.createNumeric("oldDacId", BigDecimal.class);
    public static final StringProperty<String> OP_MAIL = PropertyFactory.createString("opMail", String.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<DacType> DAC_TYPE = PropertyFactory.createEntity("dacType", DacType.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected BigDecimal agencyId;
    protected BigDecimal dacTypeId;
    protected String dataPath;
    protected String description;
    protected BigDecimal masterProgramId;
    protected String name;
    protected String nameShort;
    protected BigDecimal networkId;
    protected BigDecimal oldDacId;
    protected String opMail;

    protected Object agency;
    protected Object dacType;
    protected Object network;
    protected Object weblink;

    public void setAgencyId(BigDecimal agencyId) {
        beforePropertyWrite("agencyId", this.agencyId, agencyId);
        this.agencyId = agencyId;
    }

    public BigDecimal getAgencyId() {
        beforePropertyRead("agencyId");
        return this.agencyId;
    }

    public void setDacTypeId(BigDecimal dacTypeId) {
        beforePropertyWrite("dacTypeId", this.dacTypeId, dacTypeId);
        this.dacTypeId = dacTypeId;
    }

    public BigDecimal getDacTypeId() {
        beforePropertyRead("dacTypeId");
        return this.dacTypeId;
    }

    public void setDataPath(String dataPath) {
        beforePropertyWrite("dataPath", this.dataPath, dataPath);
        this.dataPath = dataPath;
    }

    public String getDataPath() {
        beforePropertyRead("dataPath");
        return this.dataPath;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setMasterProgramId(BigDecimal masterProgramId) {
        beforePropertyWrite("masterProgramId", this.masterProgramId, masterProgramId);
        this.masterProgramId = masterProgramId;
    }

    public BigDecimal getMasterProgramId() {
        beforePropertyRead("masterProgramId");
        return this.masterProgramId;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setNetworkId(BigDecimal networkId) {
        beforePropertyWrite("networkId", this.networkId, networkId);
        this.networkId = networkId;
    }

    public BigDecimal getNetworkId() {
        beforePropertyRead("networkId");
        return this.networkId;
    }

    public void setOldDacId(BigDecimal oldDacId) {
        beforePropertyWrite("oldDacId", this.oldDacId, oldDacId);
        this.oldDacId = oldDacId;
    }

    public BigDecimal getOldDacId() {
        beforePropertyRead("oldDacId");
        return this.oldDacId;
    }

    public void setOpMail(String opMail) {
        beforePropertyWrite("opMail", this.opMail, opMail);
        this.opMail = opMail;
    }

    public String getOpMail() {
        beforePropertyRead("opMail");
        return this.opMail;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setDacType(DacType dacType) {
        setToOneTarget("dacType", dacType, true);
    }

    public DacType getDacType() {
        return (DacType)readProperty("dacType");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "agencyId":
                return this.agencyId;
            case "dacTypeId":
                return this.dacTypeId;
            case "dataPath":
                return this.dataPath;
            case "description":
                return this.description;
            case "masterProgramId":
                return this.masterProgramId;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "networkId":
                return this.networkId;
            case "oldDacId":
                return this.oldDacId;
            case "opMail":
                return this.opMail;
            case "agency":
                return this.agency;
            case "dacType":
                return this.dacType;
            case "network":
                return this.network;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "agencyId":
                this.agencyId = (BigDecimal)val;
                break;
            case "dacTypeId":
                this.dacTypeId = (BigDecimal)val;
                break;
            case "dataPath":
                this.dataPath = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "masterProgramId":
                this.masterProgramId = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "networkId":
                this.networkId = (BigDecimal)val;
                break;
            case "oldDacId":
                this.oldDacId = (BigDecimal)val;
                break;
            case "opMail":
                this.opMail = (String)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "dacType":
                this.dacType = val;
                break;
            case "network":
                this.network = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.agencyId);
        out.writeObject(this.dacTypeId);
        out.writeObject(this.dataPath);
        out.writeObject(this.description);
        out.writeObject(this.masterProgramId);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.networkId);
        out.writeObject(this.oldDacId);
        out.writeObject(this.opMail);
        out.writeObject(this.agency);
        out.writeObject(this.dacType);
        out.writeObject(this.network);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.agencyId = (BigDecimal)in.readObject();
        this.dacTypeId = (BigDecimal)in.readObject();
        this.dataPath = (String)in.readObject();
        this.description = (String)in.readObject();
        this.masterProgramId = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.networkId = (BigDecimal)in.readObject();
        this.oldDacId = (BigDecimal)in.readObject();
        this.opMail = (String)in.readObject();
        this.agency = in.readObject();
        this.dacType = in.readObject();
        this.network = in.readObject();
        this.weblink = in.readObject();
    }

}
