package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Country;
import org.oceanops.api.orm.PtfBattery;
import org.oceanops.api.orm.PtfFirmware;
import org.oceanops.api.orm.PtfHullType;
import org.oceanops.api.orm.PumpType;

/**
 * Class _PtfHardware was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfHardware extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<BigDecimal> BALLOON_SIZE = PropertyFactory.createNumeric("balloonSize", BigDecimal.class);
    public static final StringProperty<String> BATCH_REF = PropertyFactory.createString("batchRef", String.class);
    public static final StringProperty<String> BATTERY_PACK = PropertyFactory.createString("batteryPack", String.class);
    public static final NumericProperty<BigDecimal> DROGUE = PropertyFactory.createNumeric("drogue", BigDecimal.class);
    public static final NumericProperty<BigDecimal> ID = PropertyFactory.createNumeric("id", BigDecimal.class);
    public static final DateProperty<LocalDateTime> MANUF_DATE = PropertyFactory.createDate("manufDate", LocalDateTime.class);
    public static final NumericProperty<BigDecimal> MOORING_DEPTH = PropertyFactory.createNumeric("mooringDepth", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MOORING_TYPE_ID = PropertyFactory.createNumeric("mooringTypeId", BigDecimal.class);
    public static final NumericProperty<BigDecimal> MOORING_WEIGHT = PropertyFactory.createNumeric("mooringWeight", BigDecimal.class);
    public static final StringProperty<String> SERIAL_REF = PropertyFactory.createString("serialRef", String.class);
    public static final BaseProperty<byte[]> SPEC = PropertyFactory.createBase("spec", byte[].class);
    public static final StringProperty<String> SPECIAL_FEATURE = PropertyFactory.createString("specialFeature", String.class);
    public static final EntityProperty<PtfBattery> BATTERY = PropertyFactory.createEntity("battery", PtfBattery.class);
    public static final EntityProperty<PtfFirmware> FIRMWARE = PropertyFactory.createEntity("firmware", PtfFirmware.class);
    public static final EntityProperty<PtfFirmware> FIRMWARE_ADD = PropertyFactory.createEntity("firmwareAdd", PtfFirmware.class);
    public static final EntityProperty<PtfHullType> HULL_TYPE = PropertyFactory.createEntity("hullType", PtfHullType.class);
    public static final EntityProperty<PumpType> PUMP_TYPE = PropertyFactory.createEntity("pumpType", PumpType.class);
    public static final EntityProperty<Country> SENSOR_UPGRADE_COUNTRY = PropertyFactory.createEntity("sensorUpgradeCountry", Country.class);

    protected BigDecimal balloonSize;
    protected String batchRef;
    protected String batteryPack;
    protected BigDecimal drogue;
    protected BigDecimal id;
    protected LocalDateTime manufDate;
    protected BigDecimal mooringDepth;
    protected BigDecimal mooringTypeId;
    protected BigDecimal mooringWeight;
    protected String serialRef;
    protected byte[] spec;
    protected String specialFeature;

    protected Object battery;
    protected Object firmware;
    protected Object firmwareAdd;
    protected Object hullType;
    protected Object pumpType;
    protected Object sensorUpgradeCountry;

    public void setBalloonSize(BigDecimal balloonSize) {
        beforePropertyWrite("balloonSize", this.balloonSize, balloonSize);
        this.balloonSize = balloonSize;
    }

    public BigDecimal getBalloonSize() {
        beforePropertyRead("balloonSize");
        return this.balloonSize;
    }

    public void setBatchRef(String batchRef) {
        beforePropertyWrite("batchRef", this.batchRef, batchRef);
        this.batchRef = batchRef;
    }

    public String getBatchRef() {
        beforePropertyRead("batchRef");
        return this.batchRef;
    }

    public void setBatteryPack(String batteryPack) {
        beforePropertyWrite("batteryPack", this.batteryPack, batteryPack);
        this.batteryPack = batteryPack;
    }

    public String getBatteryPack() {
        beforePropertyRead("batteryPack");
        return this.batteryPack;
    }

    public void setDrogue(BigDecimal drogue) {
        beforePropertyWrite("drogue", this.drogue, drogue);
        this.drogue = drogue;
    }

    public BigDecimal getDrogue() {
        beforePropertyRead("drogue");
        return this.drogue;
    }

    public void setId(BigDecimal id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public BigDecimal getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setManufDate(LocalDateTime manufDate) {
        beforePropertyWrite("manufDate", this.manufDate, manufDate);
        this.manufDate = manufDate;
    }

    public LocalDateTime getManufDate() {
        beforePropertyRead("manufDate");
        return this.manufDate;
    }

    public void setMooringDepth(BigDecimal mooringDepth) {
        beforePropertyWrite("mooringDepth", this.mooringDepth, mooringDepth);
        this.mooringDepth = mooringDepth;
    }

    public BigDecimal getMooringDepth() {
        beforePropertyRead("mooringDepth");
        return this.mooringDepth;
    }

    public void setMooringTypeId(BigDecimal mooringTypeId) {
        beforePropertyWrite("mooringTypeId", this.mooringTypeId, mooringTypeId);
        this.mooringTypeId = mooringTypeId;
    }

    public BigDecimal getMooringTypeId() {
        beforePropertyRead("mooringTypeId");
        return this.mooringTypeId;
    }

    public void setMooringWeight(BigDecimal mooringWeight) {
        beforePropertyWrite("mooringWeight", this.mooringWeight, mooringWeight);
        this.mooringWeight = mooringWeight;
    }

    public BigDecimal getMooringWeight() {
        beforePropertyRead("mooringWeight");
        return this.mooringWeight;
    }

    public void setSerialRef(String serialRef) {
        beforePropertyWrite("serialRef", this.serialRef, serialRef);
        this.serialRef = serialRef;
    }

    public String getSerialRef() {
        beforePropertyRead("serialRef");
        return this.serialRef;
    }

    public void setSpec(byte[] spec) {
        beforePropertyWrite("spec", this.spec, spec);
        this.spec = spec;
    }

    public byte[] getSpec() {
        beforePropertyRead("spec");
        return this.spec;
    }

    public void setSpecialFeature(String specialFeature) {
        beforePropertyWrite("specialFeature", this.specialFeature, specialFeature);
        this.specialFeature = specialFeature;
    }

    public String getSpecialFeature() {
        beforePropertyRead("specialFeature");
        return this.specialFeature;
    }

    public void setBattery(PtfBattery battery) {
        setToOneTarget("battery", battery, true);
    }

    public PtfBattery getBattery() {
        return (PtfBattery)readProperty("battery");
    }

    public void setFirmware(PtfFirmware firmware) {
        setToOneTarget("firmware", firmware, true);
    }

    public PtfFirmware getFirmware() {
        return (PtfFirmware)readProperty("firmware");
    }

    public void setFirmwareAdd(PtfFirmware firmwareAdd) {
        setToOneTarget("firmwareAdd", firmwareAdd, true);
    }

    public PtfFirmware getFirmwareAdd() {
        return (PtfFirmware)readProperty("firmwareAdd");
    }

    public void setHullType(PtfHullType hullType) {
        setToOneTarget("hullType", hullType, true);
    }

    public PtfHullType getHullType() {
        return (PtfHullType)readProperty("hullType");
    }

    public void setPumpType(PumpType pumpType) {
        setToOneTarget("pumpType", pumpType, true);
    }

    public PumpType getPumpType() {
        return (PumpType)readProperty("pumpType");
    }

    public void setSensorUpgradeCountry(Country sensorUpgradeCountry) {
        setToOneTarget("sensorUpgradeCountry", sensorUpgradeCountry, true);
    }

    public Country getSensorUpgradeCountry() {
        return (Country)readProperty("sensorUpgradeCountry");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "balloonSize":
                return this.balloonSize;
            case "batchRef":
                return this.batchRef;
            case "batteryPack":
                return this.batteryPack;
            case "drogue":
                return this.drogue;
            case "id":
                return this.id;
            case "manufDate":
                return this.manufDate;
            case "mooringDepth":
                return this.mooringDepth;
            case "mooringTypeId":
                return this.mooringTypeId;
            case "mooringWeight":
                return this.mooringWeight;
            case "serialRef":
                return this.serialRef;
            case "spec":
                return this.spec;
            case "specialFeature":
                return this.specialFeature;
            case "battery":
                return this.battery;
            case "firmware":
                return this.firmware;
            case "firmwareAdd":
                return this.firmwareAdd;
            case "hullType":
                return this.hullType;
            case "pumpType":
                return this.pumpType;
            case "sensorUpgradeCountry":
                return this.sensorUpgradeCountry;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "balloonSize":
                this.balloonSize = (BigDecimal)val;
                break;
            case "batchRef":
                this.batchRef = (String)val;
                break;
            case "batteryPack":
                this.batteryPack = (String)val;
                break;
            case "drogue":
                this.drogue = (BigDecimal)val;
                break;
            case "id":
                this.id = (BigDecimal)val;
                break;
            case "manufDate":
                this.manufDate = (LocalDateTime)val;
                break;
            case "mooringDepth":
                this.mooringDepth = (BigDecimal)val;
                break;
            case "mooringTypeId":
                this.mooringTypeId = (BigDecimal)val;
                break;
            case "mooringWeight":
                this.mooringWeight = (BigDecimal)val;
                break;
            case "serialRef":
                this.serialRef = (String)val;
                break;
            case "spec":
                this.spec = (byte[])val;
                break;
            case "specialFeature":
                this.specialFeature = (String)val;
                break;
            case "battery":
                this.battery = val;
                break;
            case "firmware":
                this.firmware = val;
                break;
            case "firmwareAdd":
                this.firmwareAdd = val;
                break;
            case "hullType":
                this.hullType = val;
                break;
            case "pumpType":
                this.pumpType = val;
                break;
            case "sensorUpgradeCountry":
                this.sensorUpgradeCountry = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.balloonSize);
        out.writeObject(this.batchRef);
        out.writeObject(this.batteryPack);
        out.writeObject(this.drogue);
        out.writeObject(this.id);
        out.writeObject(this.manufDate);
        out.writeObject(this.mooringDepth);
        out.writeObject(this.mooringTypeId);
        out.writeObject(this.mooringWeight);
        out.writeObject(this.serialRef);
        out.writeObject(this.spec);
        out.writeObject(this.specialFeature);
        out.writeObject(this.battery);
        out.writeObject(this.firmware);
        out.writeObject(this.firmwareAdd);
        out.writeObject(this.hullType);
        out.writeObject(this.pumpType);
        out.writeObject(this.sensorUpgradeCountry);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.balloonSize = (BigDecimal)in.readObject();
        this.batchRef = (String)in.readObject();
        this.batteryPack = (String)in.readObject();
        this.drogue = (BigDecimal)in.readObject();
        this.id = (BigDecimal)in.readObject();
        this.manufDate = (LocalDateTime)in.readObject();
        this.mooringDepth = (BigDecimal)in.readObject();
        this.mooringTypeId = (BigDecimal)in.readObject();
        this.mooringWeight = (BigDecimal)in.readObject();
        this.serialRef = (String)in.readObject();
        this.spec = (byte[])in.readObject();
        this.specialFeature = (String)in.readObject();
        this.battery = in.readObject();
        this.firmware = in.readObject();
        this.firmwareAdd = in.readObject();
        this.hullType = in.readObject();
        this.pumpType = in.readObject();
        this.sensorUpgradeCountry = in.readObject();
    }

}
