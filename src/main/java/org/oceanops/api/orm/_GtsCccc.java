package org.oceanops.api.orm;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _GtsCccc was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _GtsCccc extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> CCCC = Property.create("cccc", String.class);
    public static final Property<String> CENTER = Property.create("center", String.class);
    public static final Property<String> CITY = Property.create("city", String.class);
    public static final Property<Integer> ID = Property.create("id", Integer.class);
    public static final Property<Integer> INSERT_MARINE = Property.create("insertMarine", Integer.class);
    public static final Property<String> LOCATION = Property.create("location", String.class);
    public static final Property<String> TAG = Property.create("tag", String.class);
    public static final Property<String> TMP = Property.create("tmp", String.class);
    public static final Property<Agency> AGENCY = Property.create("agency", Agency.class);
    public static final Property<Country> COUNTRY = Property.create("country", Country.class);
    public static final Property<List<GtsCcccHeader>> GTS_CCCC_HEADERS = Property.create("gtsCcccHeaders", List.class);
    public static final Property<List<Obs>> OBSS = Property.create("obss", List.class);
    public static final Property<List<QcFeedback>> QC_FEEDBACKS = Property.create("qcFeedbacks", List.class);

    public void setCccc(String cccc) {
        writeProperty("cccc", cccc);
    }
    public String getCccc() {
        return (String)readProperty("cccc");
    }

    public void setCenter(String center) {
        writeProperty("center", center);
    }
    public String getCenter() {
        return (String)readProperty("center");
    }

    public void setCity(String city) {
        writeProperty("city", city);
    }
    public String getCity() {
        return (String)readProperty("city");
    }

    public void setId(int id) {
        writeProperty("id", id);
    }
    public int getId() {
        Object value = readProperty("id");
        return (value != null) ? (Integer) value : 0;
    }

    public void setInsertMarine(int insertMarine) {
        writeProperty("insertMarine", insertMarine);
    }
    public int getInsertMarine() {
        Object value = readProperty("insertMarine");
        return (value != null) ? (Integer) value : 0;
    }

    public void setLocation(String location) {
        writeProperty("location", location);
    }
    public String getLocation() {
        return (String)readProperty("location");
    }

    public void setTag(String tag) {
        writeProperty("tag", tag);
    }
    public String getTag() {
        return (String)readProperty("tag");
    }

    public void setTmp(String tmp) {
        writeProperty("tmp", tmp);
    }
    public String getTmp() {
        return (String)readProperty("tmp");
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }


    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }


    public void addToGtsCcccHeaders(GtsCcccHeader obj) {
        addToManyTarget("gtsCcccHeaders", obj, true);
    }
    public void removeFromGtsCcccHeaders(GtsCcccHeader obj) {
        removeToManyTarget("gtsCcccHeaders", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<GtsCcccHeader> getGtsCcccHeaders() {
        return (List<GtsCcccHeader>)readProperty("gtsCcccHeaders");
    }


    public void addToObss(Obs obj) {
        addToManyTarget("obss", obj, true);
    }
    public void removeFromObss(Obs obj) {
        removeToManyTarget("obss", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Obs> getObss() {
        return (List<Obs>)readProperty("obss");
    }


    public void addToQcFeedbacks(QcFeedback obj) {
        addToManyTarget("qcFeedbacks", obj, true);
    }
    public void removeFromQcFeedbacks(QcFeedback obj) {
        removeToManyTarget("qcFeedbacks", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<QcFeedback> getQcFeedbacks() {
        return (List<QcFeedback>)readProperty("qcFeedbacks");
    }


}
